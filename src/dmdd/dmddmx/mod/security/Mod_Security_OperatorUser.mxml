<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" layout="vertical" width="100%" height="100%" 
		   paddingLeft="10" paddingRight="10" paddingBottom="5"
		   creationComplete="creationCompleteHandler(event)"  
		   xmlns:containers="aks.aksmx.containers.*" xmlns:controls="aks.aksmx.controls.*" 
		   xmlns:security="dmdd.dmddmx.com.security.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:RemoteObject endpoint="{ClientEnvironment.endpoint}" id="srvSecurity" destination="SecurityService">
			<s:method name="getOperatorUsersStat" result="resultHandler4getOperatorUsersStat(event)" fault="faultHandler4getOperatorUsersStat(event)">
			</s:method>			
			<s:method name="getOperatorUsers" result="resultHandler4getOperatorUsers(event)" fault="faultHandler4getOperatorUsers(event)">
			</s:method>
			<s:method name="delOperatorUser" result="resultHandler4delOperatorUser(event)" fault="faultHandler4delOperatorUser(event)">
			</s:method>
			<s:method name="refreshUserStats" result="resultHandler4refreshUserStats(event)" fault="faultHandler4refreshUserStats(event)"/>
			<s:method name="getOperatorUserById" result="resultHandler4getOperatorUserById(event)" fault="faultHandler4getOperatorUserById(event)"/>
			<s:method name="refreshOldData" result="resultHandler4refreshOldData(event)" fault="faultHandler4refreshOldData(event)"/>
			
		</s:RemoteObject>
		
	</fx:Declarations>
	<fx:Metadata>
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import aks.aksas.utils.UtilUi;
			
			import com.cool.assets.CoolAssetsFile;
			
			import dmdd.dmddas.common.constant.BizConst;
			import dmdd.dmddas.common.constant.FunPermiConst;
			import dmdd.dmddas.common.system.ClientEnvironment;
			import dmdd.dmddas.common.utils.UtilExceptionLocale;
			import dmdd.dmddas.dataaccess.bizobject.BOperatorUser;
			import dmdd.dmddmx.com.security.Com_Security_OperatorUser_AU;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;


			//	描述    begin
			//	描述    end

			//	0	输入参数    begin						
			//	0	输入参数    end
			
			//	1	输出参数    begin
			//	1	输出参数    end
			
			//	2	本地变量    begin	
			[Bindable]
			private var prvVar4dp4comAdgOperatorUser:ArrayCollection = new ArrayCollection();
			
			private var prvVar4sqlRestriction:String = null;	
			
			
			private var prvVar4auWindow:Com_Security_OperatorUser_AU = null;
			
			
			[Bindable]
			private var prvVar4blFunPermission4query:Boolean = true;			
			[Bindable]
			private var prvVar4blFunPermission4manage:Boolean = true;
			
			[Bindable]
			private var prvVar4selectedNum:int = -1;
			//	2	本地变量    end			
			
			//	3	公共方法    begin			
			//	3	公共方法    end		
			
			//	4	初始化方法    begin	
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.prvVar4blFunPermission4query = true;
				this.prvVar4blFunPermission4manage = ClientEnvironment.checkIsPermission( FunPermiConst.OPERATORUSER_MANAGE );
				
			}			
			//	4	初始化方法    end				
			
			//	5	事件响应方法    begin		
			private function callbackFunction4query4comQCond():void
			{				
				this.prvVar4sqlRestriction = this.comQCond.pubFun4getParamOut4sqlRestriction();
				var blPageQuery:Boolean = this.comQCond.pubFun4getParamOut4blPageQuery();

				if( blPageQuery == true )
				{	
					UtilUi.pubFun4PopWaitWindow( this );
					this.srvSecurity.getOperatorUsersStat( this.prvVar4sqlRestriction, ClientEnvironment.getOperatorUser().id );	
				}
				else
				{	
					//	不分页查询
					UtilUi.pubFun4PopWaitWindow( this );
					this.srvSecurity.getOperatorUsers( this.prvVar4sqlRestriction, ClientEnvironment.getOperatorUser().id, true, -1, ClientEnvironment.getSysParamPageSize() );
				}								
			}			

			//	分页查询相关		begin
			private function faultHandler4getOperatorUsersStat(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('alert','alt_title_warn') );
			}	
			
			private function resultHandler4getOperatorUsersStat(event:ResultEvent):void 
			{
				//	初始化数据表格控制板
				var rstSize:Number = Number(event.result);
				this.comAksDataGridControlBar.pubFun4setResultParams( true, rstSize, ClientEnvironment.getSysParamPageSize() );
				
				//	去执行第一页查询
				this.srvSecurity.getOperatorUsers( this.prvVar4sqlRestriction, ClientEnvironment.getOperatorUser().id, true, 1, ClientEnvironment.getSysParamPageSize() );
			}
			
			private function prvFun4pageQueryOperatorUsers( _pageIndex:int ):void
			{
				UtilUi.pubFun4PopWaitWindow( this );
				this.srvSecurity.getOperatorUsers( this.prvVar4sqlRestriction, ClientEnvironment.getOperatorUser().id, true, _pageIndex, ClientEnvironment.getSysParamPageSize() );					
			}			
			//	分页查询相关		end
			
			
			private function faultHandler4getOperatorUsers(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('alert','alt_title_warn') );
			}	
			
			private function resultHandler4getOperatorUsers(event:ResultEvent):void 
			{
				this.prvVar4dp4comAdgOperatorUser = ArrayCollection(event.result);
				
				if( this.comQCond.pubFun4getParamOut4blPageQuery() == false )
				{
					//	不是分页查询，需要根据查询结果初始化数据表格控制板
					this.comAksDataGridControlBar.pubFun4setResultParams( false, this.prvVar4dp4comAdgOperatorUser.length, this.prvVar4dp4comAdgOperatorUser.length );
				}
				
				UtilUi.pubFun4RemoveWaitWindow();
			}					
			
			private function onCopy():void
			{	
				var selectedOperatorUser:BOperatorUser = BOperatorUser( this.comAdgOperatorUser.selectedItem );
				// 不必检查，这个方法被调用的前提已经保证 
				
				if( this.prvVar4auWindow == null )
				{
					this.prvVar4auWindow = new Com_Security_OperatorUser_AU();
					this.prvVar4auWindow.pubFun4setParamIn4closeCallback( this, callbackFunction4auWinClose );
					
				}
				
				PopUpManager.addPopUp( this.prvVar4auWindow, ClientEnvironment.modWork, true );
				PopUpManager.centerPopUp(prvVar4auWindow);
				
				this.prvVar4auWindow.title = resourceManager.getString('menu','newUser');				
				// 这里的代码须如此：先准备好后再设置给 auWindow
				// 如果直接设置一个新建对象给auWindow，然后再操作其准备其内容，则可能不能触发auWindow内部的相关绑定动作
				
				var newOperatorUser:BOperatorUser = new BOperatorUser();
				newOperatorUser.copyDeep( selectedOperatorUser, true );
				
				var date:Date = new Date();
				
				
				newOperatorUser.createdTime = new Date( new Date().time + ClientEnvironment.getTimeDifference() );			
				newOperatorUser.creatorName = ClientEnvironment.getOperatorUser().userName;
				newOperatorUser.loginTimes = 0;
				newOperatorUser.isValid = BizConst.GLOBAL_YESNO_YES;
				newOperatorUser.isOnline = BizConst.GLOBAL_YESNO_NO;
				newOperatorUser.superiorOperatorUser = ClientEnvironment.getOperatorUser();
				
				newOperatorUser.loginName = "";
				newOperatorUser.userName = "";
				newOperatorUser.password = "";				
				
				this.prvVar4auWindow.pubFun4setParamIo4operatorUser( newOperatorUser, UtilUi.AUWINDOW_USE_NEW );					
				// PopUpManager.centerPopUp( this.auWindow );		
			}		
			
			
			private function onNew():void
			{
				if( this.prvVar4auWindow == null )
				{
					this.prvVar4auWindow = new Com_Security_OperatorUser_AU();
					this.prvVar4auWindow.pubFun4setParamIn4closeCallback( this, callbackFunction4auWinClose );
				}
				
				PopUpManager.addPopUp( this.prvVar4auWindow, ClientEnvironment.modWork, true );
				PopUpManager.centerPopUp(prvVar4auWindow);
				
				this.prvVar4auWindow.title = resourceManager.getString('menu','newUser');
				
				// 这里的代码须如此：先准备好后再设置给 auWindow
				// 如果直接设置一个新建对象给auWindow，然后再操作其准备其内容，则可能不能触发auWindow内部的相关绑定动作	
				var newOperatorUser:BOperatorUser = new BOperatorUser();	
				newOperatorUser.createdTime = new Date( new Date().time + ClientEnvironment.getTimeDifference() );			
				newOperatorUser.creatorName = ClientEnvironment.getOperatorUser().userName;
				newOperatorUser.loginTimes = 0;
				newOperatorUser.isValid = BizConst.GLOBAL_YESNO_YES;
				newOperatorUser.isOnline = BizConst.GLOBAL_YESNO_NO;
				newOperatorUser.superiorOperatorUser = ClientEnvironment.getOperatorUser();
				
				this.prvVar4auWindow.pubFun4setParamIo4operatorUser( newOperatorUser, UtilUi.AUWINDOW_USE_NEW );								
			} 
			
			private function onUpd():void
			{
				var selectedOperatorUser:BOperatorUser = BOperatorUser( this.comAdgOperatorUser.selectedItem );
				// 不必检查，这个方法被调用的前提已经保证 

				if( this.prvVar4auWindow == null )
				{
					this.prvVar4auWindow = new Com_Security_OperatorUser_AU();
					this.prvVar4auWindow.pubFun4setParamIn4closeCallback( this, callbackFunction4auWinClose );	
				}
				
				PopUpManager.addPopUp( this.prvVar4auWindow, ClientEnvironment.modWork, true );
				PopUpManager.centerPopUp(prvVar4auWindow);
				
				this.prvVar4auWindow.title = resourceManager.getString('menu','editUser');
				
				// 这里的代码须如此：先准备好后再设置给 auWindow
				// 如果直接设置一个新建对象给auWindow，然后再操作其准备其内容，则可能不能触发auWindow内部的相关绑定动作	
				var updOperatorUser:BOperatorUser = new BOperatorUser();	
				updOperatorUser.copyDeep( selectedOperatorUser, false );			
				this.prvVar4auWindow.pubFun4setParamIo4operatorUser( updOperatorUser, UtilUi.AUWINDOW_USE_UPD );							 
				
			} 
			
			private function callbackFunction4auWinClose():void
			{
				if( this.prvVar4auWindow.pubFun4getParamOut4winCloseWay() == UtilUi.WINDOW_CLOSEWAY_OK )
				{
					var rstOperatorUser:BOperatorUser = this.prvVar4auWindow.pubFun4getParamIo4operatorUser();
					if( rstOperatorUser != null )
					{
						if( this.prvVar4auWindow.pubFun4getParamIo4winUse() == UtilUi.AUWINDOW_USE_NEW )
						{
							if( this.prvVar4dp4comAdgOperatorUser == null )
							{
								this.prvVar4dp4comAdgOperatorUser = new ArrayCollection();
							}
							this.prvVar4dp4comAdgOperatorUser.addItemAt( rstOperatorUser, 0 );							
						}
						else if( this.prvVar4auWindow.pubFun4getParamIo4winUse() == UtilUi.AUWINDOW_USE_UPD )
						{
							this.prvVar4dp4comAdgOperatorUser.setItemAt( rstOperatorUser, this.comAdgOperatorUser.selectedIndex );
							if( rstOperatorUser.id == ClientEnvironment.getOperatorUser().id )
							{
								ClientEnvironment.setOperatorUser( rstOperatorUser );
							}
						}
					}
				}
				//this.prvVar4auWindow = null;														
			}			
			
			
			private function onDel():void
			{
				var selectedOperatorUser:BOperatorUser = BOperatorUser(this.comAdgOperatorUser.selectedItem);
				
				var alert_title_hint:String = resourceManager.getString('alert','alert_title_hint');
				
				var alert_msg:String = null;
				if( selectedOperatorUser.id == ClientEnvironment.getOperatorUser().id )
				{
					alert_msg = resourceManager.getString('alert','alert_msg_deleteself11');
					Alert.show( alert_msg, alert_title_hint );
					return;
				}
				
				var alert_msg_deleteconfirm:String = resourceManager.getString('alert','alert_msg_deleteconfirm4');
				Alert.show( alert_msg_deleteconfirm, alert_title_hint, Alert.OK | Alert.CANCEL, this, deleteConfirmHandler, null, Alert.OK );
			
			}				

			private function deleteConfirmHandler(event:CloseEvent):void
			{
				if( event.detail == Alert.OK )
				{
					// 相关检查都已在 prvFun4getEnabled4BtnDel中执行，此处不再检查    begin
					var selectedOperatorUser:BOperatorUser = BOperatorUser(this.comAdgOperatorUser.selectedItem);
					// 相关检查都已在 prvFun4getEnabled4BtnDel中执行，此处不再检查    end					
					UtilUi.pubFun4PopWaitWindow( this );
					this.srvSecurity.delOperatorUser( selectedOperatorUser );										
				}
			}	
			
			private function faultHandler4delOperatorUser(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('alert','alt_title_warn') );
			}	
			
			private function resultHandler4delOperatorUser(event:ResultEvent):void 
			{
				UtilUi.pubFun4RemoveWaitWindow();
				var alert_title_hint:String = resourceManager.getString('alert','alert_title_hint');
				var alert_msg:String = null;
				
				var blSucceed:Boolean = Boolean(event.result);
				if( blSucceed == true )
				{
					alert_msg = resourceManager.getString('alert','alert_msg_succeed');
					Alert.show(alert_msg, alert_title_hint);
					this.prvVar4dp4comAdgOperatorUser.removeItemAt( this.comAdgOperatorUser.selectedIndex );					
				}
				else
				{
					alert_msg = resourceManager.getString('alert','alert_msg_fail');
					Alert.show(alert_msg, alert_title_hint);
				}				
			}	
			
			private function onRefreshUserStats():void
			{
				var alert_title_hint:String = resourceManager.getString('alert','alert_title_hint');
				var alert_msg_refreshuserstats:String = resourceManager.getString('alert','alert_msg_refreshuserstats11');
				Alert.show(alert_msg_refreshuserstats,alert_title_hint,Alert.OK|Alert.CANCEL,this,refreshUserStats,null,Alert.OK);							
			}
			
			private function refreshUserStats(event:CloseEvent):void
			{
				if( event.detail == Alert.OK )
				{
					var selectedOperatorUser:BOperatorUser = BOperatorUser(this.comAdgOperatorUser.selectedItem);				
					UtilUi.pubFun4PopWaitWindow( this );
					this.srvSecurity.refreshUserStats( selectedOperatorUser );
				}
			}
			private function faultHandler4refreshUserStats(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('alert','alt_title_warn') );
			}
			
			private function resultHandler4refreshUserStats(event:ResultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				var alert_title_hint:String = resourceManager.getString('alert','alert_title_hint');
				var alert_msg:String = null;
				
				var blSucceed:Boolean = Boolean(event.result);
				if( blSucceed == true )
				{
					alert_msg = resourceManager.getString('alert','alert_msg_succeed');
					Alert.show(alert_msg, alert_title_hint);
					this.prvVar4dp4comAdgOperatorUser.removeItemAt( this.comAdgOperatorUser.selectedIndex );					
				}
				else
				{
					alert_msg = resourceManager.getString('alert','alert_msg_fail');
					Alert.show(alert_msg, alert_title_hint);
				}
			}
			
			protected function comAdgOperatorUser_changeHandler(event:ListEvent):void
			{
				if(this.comAdgOperatorUser.selectedIndex>-1)
				{
					var selectedOperatorUser:BOperatorUser = BOperatorUser(this.comAdgOperatorUser.selectedItem);
					this.prvVar4selectedNum = this.comAdgOperatorUser.selectedIndex;
					if(selectedOperatorUser.isGetDetail==false)
					{
						this.srvSecurity.getOperatorUserById(selectedOperatorUser.id,true);
						UtilUi.pubFun4PopWaitWindow(this);
					}
					
				}
			}
			
			private function faultHandler4getOperatorUserById(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('alert','alt_title_warn') );
			}
			
			private function resultHandler4getOperatorUserById(event:ResultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				var selectedOperatorUser:BOperatorUser = BOperatorUser(event.result);
				selectedOperatorUser.isGetDetail = true;
				this.prvVar4dp4comAdgOperatorUser.removeItemAt(this.prvVar4selectedNum);
				this.prvVar4dp4comAdgOperatorUser.addItemAt(selectedOperatorUser,this.prvVar4selectedNum);
				this.comAdgOperatorUser.selectedItem = 	selectedOperatorUser;
			}
			
			private function onRefreshOldData():void
			{				
				var alert_title_hint:String = resourceManager.getString('alert','alert_title_hint');
				var alert_msg_refreshuserstats:String = resourceManager.getString('alert','alert_msg_refresholddata11');
				Alert.show(alert_msg_refreshuserstats,alert_title_hint,Alert.OK|Alert.CANCEL,this,refreshOldData,null,Alert.OK);							
			}
			
			private function refreshOldData(event:CloseEvent):void
			{
				if( event.detail == Alert.OK )
				{							
					UtilUi.pubFun4PopWaitWindow( this );
					this.srvSecurity.refreshOldData( );
				}
			}
			
			private function faultHandler4refreshOldData(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('alert','alt_title_warn') );
			}
			
			private function resultHandler4refreshOldData(event:ResultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				var alert_title_hint:String = resourceManager.getString('alert','alert_title_hint');
				var alert_msg:String = null;
				
				var blSucceed:Boolean = Boolean(event.result);
				if( blSucceed == true )
				{
					alert_msg = resourceManager.getString('alert','alert_msg_succeed');
					Alert.show(alert_msg, alert_title_hint);
									
				}
				else
				{
					alert_msg = resourceManager.getString('alert','alert_msg_fail');
					Alert.show(alert_msg, alert_title_hint);
				}
			}
			
			//	5	事件响应方法    end
			
			//	6	本地方法    begin
			private function prvFun4getEnabled4BtnManage( _selectedItem:Object ):Boolean
			{
				// todo
				if( _selectedItem == null )
				{
					return false;
				}
				
				if( this.prvVar4blFunPermission4manage == false )
				{
					return false;
				}
				
				return true;
			}
			//	6	本地方法   end		

		]]>
	</fx:Script>
	
	<mx:VDividedBox width="100%" height="100%" horizontalAlign="center" paddingTop="5">
		<s:VGroup width="100%" height="50%" >
			<security:Com_Security_OperatorUser_QueryCond width="100%" id="comQCond" paramIn4queryCallback4thisObject="{this}" paramIn4queryCallback4function="{this.callbackFunction4query4comQCond}" paramIn4enabled="{this.prvVar4blFunPermission4query}">
			</security:Com_Security_OperatorUser_QueryCond>
			<mx:HRule width="98%" />
			<containers:AksControlBar>
				<s:Button label="{resourceManager.getString('button','new')}" icon="{CoolAssetsFile.newIcon}"  enabled="{this.prvVar4blFunPermission4manage}" click="onNew()"/>
				<s:Button label="{resourceManager.getString('button','copy')}" icon="{CoolAssetsFile.copyIcon}" enabled="{this.prvFun4getEnabled4BtnManage(this.comAdgOperatorUser.selectedItem)}" click="onCopy()"/>
				<s:Button label="{resourceManager.getString('button','edit')}" icon="{CoolAssetsFile.editIcon}"  enabled="{this.prvFun4getEnabled4BtnManage(this.comAdgOperatorUser.selectedItem)}" click="onUpd()"/>
				<s:Button label="{resourceManager.getString('button','del')}" icon="{CoolAssetsFile.deleteIcon}"  enabled="{this.prvFun4getEnabled4BtnManage(this.comAdgOperatorUser.selectedItem)}" click="onDel()"/>
				<s:Button label="{resourceManager.getString('button','updateUserState')}" icon="{CoolAssetsFile.refresh3Icon}"
						  enabled="{this.prvFun4getEnabled4BtnManage(this.comAdgOperatorUser.selectedItem)}" click="onRefreshUserStats()"/>
				<s:Button label="{resourceManager.getString('button','updateBasisData')}" icon="{CoolAssetsFile.refresh3Icon}" 
						  enabled="{this.prvVar4blFunPermission4manage}" click="onRefreshOldData()"/>
				<controls:AksDataGridControlBar id="comAksDataGridControlBar" width="100%" paramIn4callback4thisObject="{this}" paramIn4callback4queryFunction="{this.prvFun4pageQueryOperatorUsers}" paramIn4dataGrid="{this.comAdgOperatorUser}">
				</controls:AksDataGridControlBar>
			</containers:AksControlBar>
			
			<security:Com_Security_OperatorUser_AdvancedDataGrid id="comAdgOperatorUser" dataProvider="{this.prvVar4dp4comAdgOperatorUser}" width="100%" height="100%" 
																 doubleClickEnabled="true" itemDoubleClick="onUpd()" change="comAdgOperatorUser_changeHandler(event)"/>
			
		</s:VGroup>
		
		<mx:TabNavigator width="100%" height="50%">
			<s:NavigatorContent label="{resourceManager.getString('menu','userGeneralInfo')}" width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<security:Com_Security_OperatorUser_Properties paramIn4editable="false" paramIo4operatorUser="{BOperatorUser(this.comAdgOperatorUser.selectedItem)}" width="100%" height="100%">
				</security:Com_Security_OperatorUser_Properties>
			</s:NavigatorContent>
			<s:NavigatorContent label="{resourceManager.getString('menu','funcAccess')}" width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<security:Com_Security_OperatorUserFunPermission_AdvancedDataGrid dataProvider="{BOperatorUser(this.comAdgOperatorUser.selectedItem).operatorUserFunPermissions}" width="100%" height="100%"/>
			</s:NavigatorContent>
			<s:NavigatorContent label="{resourceManager.getString('menu','busDataAccess')}" width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<security:Com_Security_OperatorUserBizData_AdvancedDataGrid_View dataProvider="{BOperatorUser(this.comAdgOperatorUser.selectedItem).operatorUserBizDatas}" width="100%" height="100%"/>
			</s:NavigatorContent>
			<s:NavigatorContent label="{resourceManager.getString('menu','busScopeAccess')}" width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout/>
				</s:layout>
				<security:Com_Security_OperatorUserProOrg_AdvancedDataGrid dataProvider="{BOperatorUser(this.comAdgOperatorUser.selectedItem).operatorUserProOrgs}" width="100%" height="100%"/>
			</s:NavigatorContent>
		</mx:TabNavigator>	
		
	</mx:VDividedBox>
</mx:Module>
