<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" layout="vertical" width="100%" height="100%" 
		   paddingLeft="10" paddingRight="10" paddingBottom="3"
		   creationComplete="creationCompleteHandler(event)" 
		   xmlns:containers="aks.aksmx.containers.*" xmlns:history="dmdd.dmddmx.com.history.*" xmlns:bizdata="dmdd.dmddmx.com.bizdata.*" xmlns:unit="dmdd.dmddmx.com.unit.*" xmlns:security="dmdd.dmddmx.com.security.*" xmlns:common="dmdd.dmddmx.com.common.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:RemoteObject endpoint="{ClientEnvironment.endpoint}" id="ifc" destination="InterfaceStandardService">	
			<s:method name="getInHistoryDataADRs" result="resultHandler4getInHistoryDataADRs(event)" fault="faultHandler4getInHistoryDataADRs(event)">
			</s:method>		
			<s:method name="saveHistoryDataADR" result="resultHandler4saveHistoryDataADR(event)" fault="faultHandler4saveHistoryDataADR(event)">
			</s:method>
			<s:method name="deleteHistoryDataADR" result="resultHandler4deleteHistoryDataADR(event)" fault="faultHandler4deleteHistoryDataADR(event)">
			</s:method>	
		</s:RemoteObject>
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("mod_security_interface_standard_historydataadr")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import aks.aksas.utils.UtilUi;
			
			import dmdd.dmddas.common.constant.BizConst;
			import dmdd.dmddas.common.system.ClientEnvironment;
			import dmdd.dmddas.common.utils.UtilExceptionLocale;
			import dmdd.dmddas.dataaccess.aidobject.ABImInHistoryData;
			import dmdd.dmddas.dataaccess.aidobject.ABImInHistoryDataADR;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IViewCursor;
			import mx.controls.AdvancedDataGrid;
			import mx.controls.Alert;
			import mx.controls.DataGrid;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			
			
			//	描述    begin
			//	描述    end
			
			//	0	输入参数    begin						
			//	0	输入参数    end
			
			//	1	输出参数    begin
			//	1	输出参数    end
			
			//	2	本地变量    begin	
			[Bindable]
			private var prvVar4dp4comAdgImHistoryData:ArrayCollection = new ArrayCollection();
			
			private var prvVar4arrFailedRecord:ArrayCollection = new ArrayCollection();
			
			//	2	本地变量    end			
			
			//	3	公共方法    begin			
			//	3	公共方法    end		
			
			//	4	初始化方法    begin	
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.comAdgImHistoryData.result.visible=false;

			}
			//	4	初始化方法    end				
			
			//	5	事件响应方法    begin
			private function onLoad():void
			{
				var alert_title_hint:String = resourceManager.getString('mod_security_interface_standard_historydataadr','alert_title_hint');
				var alert_msg_waitforgetdata:String = resourceManager.getString('mod_security_interface_standard_historydataadr','alert_msg_waitforgetdata');
				
				Alert.show( alert_msg_waitforgetdata, alert_title_hint, Alert.OK | Alert.CANCEL, this, alert_msg_waitforgetdataConfirmHandler, null, Alert.OK );
				
			}
			
			private function alert_msg_waitforgetdataConfirmHandler(event:CloseEvent):void
			{
				if( event.detail == Alert.OK )
				{
					//	已经确认过，执行操作
					UtilUi.pubFun4PopWaitWindow(this);
					ifc.getInHistoryDataADRs("");
				}
			}
			
			private function faultHandler4getInHistoryDataADRs(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('main','alt_title_warn') );
			}
			
			private function resultHandler4getInHistoryDataADRs(event:ResultEvent):void 
			{
				UtilUi.pubFun4RemoveWaitWindow();
				this.prvVar4dp4comAdgImHistoryData = ArrayCollection(event.result);
				this.btnSave.enabled = true;
				this.comAdgImHistoryData.result.visible =false;

			}
			
			private function onSave():void
			{
				UtilUi.pubFun4PopWaitWindow(this);
				ifc.saveHistoryDataADR(this.prvVar4dp4comAdgImHistoryData);
			}
			
			private function faultHandler4saveHistoryDataADR(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('main','alt_title_warn') );
			}
			
			private function resultHandler4saveHistoryDataADR(event:ResultEvent):void 
			{
				this.prvVar4dp4comAdgImHistoryData = ArrayCollection(event.result);
				
				this.prvVar4arrFailedRecord = new ArrayCollection();
				
				var totalNum:int = 0; 
				var failNum:int = 0;
				var i:int;
				var rstImHistoryData:ABImInHistoryDataADR = null;
				if( this.prvVar4dp4comAdgImHistoryData != null )
				{
					totalNum = this.prvVar4dp4comAdgImHistoryData.length;
					for( i=0; i<this.prvVar4dp4comAdgImHistoryData.length; i=i+1 )
					{
						rstImHistoryData = ABImInHistoryDataADR(this.prvVar4dp4comAdgImHistoryData.getItemAt(i));
						if( rstImHistoryData.result != BizConst.IMPORT_RESULT_SUCCESS )
						{
							rstImHistoryData.result = UtilExceptionLocale.getExceptionMessageLocaleByCauseMessage( rstImHistoryData.result );
							
							this.prvVar4arrFailedRecord.addItem( rstImHistoryData );
						}
						
					}
					failNum = this.prvVar4arrFailedRecord.length;
				}
				
				UtilUi.pubFun4RemoveWaitWindow();
				this.comAdgImHistoryData.result.visible = true;
				
				var alert_title_hint:String = resourceManager.getString('mod_security_interface_standard_historydataadr','alert_title_hint');
				var alert_msg:String = null;  	
				
				alert_msg = resourceManager.getString('mod_security_interface_standard_historydataadr','alert_msg_totalnum');
				alert_msg = alert_msg + totalNum + "\n";
				alert_msg = alert_msg + resourceManager.getString('mod_security_interface_standard_historydataadr','alert_msg_failnum');
				alert_msg = alert_msg + failNum + "\n";
				
				Alert.show( alert_msg, alert_title_hint );
				
				if( failNum > 0 )
				{
					this.btnExport.enabled = true;					
				}
				else
				{
					this.btnExport.enabled = false;					
				}	

				this.btnSave.enabled =false;
				
			}
			
			private function onClear():void
			{
				this.prvVar4dp4comAdgImHistoryData = new ArrayCollection();
				this.comAdgImHistoryData.result.visible =false;
				this.btnExport.enabled = false;
				this.btnSave.enabled = false;
			}
			
			private function onExport():void
			{
				//	只导出错误的，所以先把组件显示的内容换成错误的，处理完后再换回来	begin
				var arrdp4comAdgImHistoryData_bak:ArrayCollection = new ArrayCollection();
				arrdp4comAdgImHistoryData_bak.addAll( this.prvVar4dp4comAdgImHistoryData );
				
				this.prvVar4dp4comAdgImHistoryData.removeAll();
				this.prvVar4dp4comAdgImHistoryData.addAll( this.prvVar4arrFailedRecord );
				//	this.prvVar4dp4comAdgImHistoryData.addAll(this.prvVar4arrOkButFailedRecord);
				
				var TSVString:String = this.exportCSV( this.comAdgImHistoryData ) ;
				
				this.prvVar4dp4comAdgImHistoryData.removeAll();
				this.prvVar4dp4comAdgImHistoryData.addAll( arrdp4comAdgImHistoryData_bak );
				//	只导出错误的，所以先把组件显示的内容换成错误的，处理完后再换回来	end
				
				// Copy the TSV string to the clipboard
				System.setClipboard(TSVString);					
			}
			
			private function onLoadError():void
			{
				var alert_title_hint:String = resourceManager.getString('mod_security_interface_standard_historydataadr','alert_title_hint');
				var alert_msg_waitforgetdata:String = resourceManager.getString('mod_security_interface_standard_historydataadr','alert_msg_waitforgetdata');
				
				Alert.show( alert_msg_waitforgetdata, alert_title_hint, Alert.OK | Alert.CANCEL, this, alert_msg_waitforgetErrordataConfirmHandler, null, Alert.OK );			
			}
			
			private function alert_msg_waitforgetErrordataConfirmHandler(event:CloseEvent):void
			{
				if( event.detail == Alert.OK )
				{
					//	已经确认过，执行操作
					UtilUi.pubFun4PopWaitWindow(this);
					ifc.getInHistoryDataADRs("NOT");
				}
			}
			
			private function onDeleteAll():void
			{
				UtilUi.pubFun4PopWaitWindow(this);
				ifc.deleteHistoryDataADR();
			}
			
			private function faultHandler4deleteHistoryDataADR(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('main','alt_title_warn') );
			}
			
			private function resultHandler4deleteHistoryDataADR(event:ResultEvent):void 
			{
				UtilUi.pubFun4RemoveWaitWindow();
				this.prvVar4dp4comAdgImHistoryData = new ArrayCollection();
			}
			
			//	5	事件响应方法    end
			
			//	6	本地方法    begin
			private function exportCSV(dg:AdvancedDataGrid, csvSeparator:String="\t", lineSeparator:String="\n"):String
			{
				var data:String = "";
				var columns:Array = dg.columns;
				var columnCount:int = columns.length;
				var column:AdvancedDataGridColumn;
				var header:String = "";
				var headerGenerated:Boolean = false;
				var dataProvider:Object = dg.dataProvider;
				var rowCount:int = dataProvider.length;
				var dp:Object = null;
				
				var cursor:IViewCursor = dataProvider.createCursor ();
				var j:int = 0;
				
				//loop through rows
				while (!cursor.afterLast)
				{
					var obj:Object = null;
					obj = cursor.current;
					
					//loop through all columns for the row
					for(var k:int = 0; k < columnCount; k++)
					{
						column = columns[k];
						//Exclude column data which is invisible (hidden)
						if(!column.visible)
						{
							continue;
						}
						
						data += "\""+ column.itemToLabel(obj)+ "\"";
						if(k < (columnCount -1))
						{
							data += csvSeparator;
						}
						//generate header of CSV, only if it's not genereted yet
						if (!headerGenerated)
						{
							header += "\"" + column.headerText + "\"";
							if (k < columnCount - 1)
							{
								header += csvSeparator;
							}
						}
						
						
					}
					
					headerGenerated = true;
					if (j < (rowCount - 1))
					{
						data += lineSeparator;
					}
					j++;
					cursor.moveNext ();
				}
				
				//set references to null:
				dataProvider = null;
				columns = null;
				column = null;
				
				return (header + "\r\n" + data);
			} 
			
			//	6	本地方法   end	
			
		]]>
	</fx:Script>
	
	<common:LabelBoundary labelText="{resourceManager.getString('mod_security_interface_standard_historydataadr','historydata')}" />
	<containers:AksControlBar>
		<s:Button label="{resourceManager.getString('mod_security_interface_standard_historydataadr','btn_load')}"  id="btnLoad" click="onLoad()"/> 
		<s:Button label="{resourceManager.getString('mod_security_interface_standard_historydataadr','btn_loaderror')}"  id="btnLoadError" click="onLoadError()"/> 
		<s:Button label="{resourceManager.getString('mod_security_interface_standard_historydataadr','btn_deleteall')}"  id="btnDeleteAll" click="onDeleteAll()"/> 			
		<mx:Spacer width="500"/>
		<s:Button label="{resourceManager.getString('mod_security_interface_standard_historydataadr','btn_save')}"  id="btnSave" click="onSave()" enabled="false"/> 
		<s:Button label="{resourceManager.getString('mod_security_interface_standard_historydataadr','btn_clear')}" click="onClear()"/> 
		<s:Button label="{resourceManager.getString('mod_security_interface_standard_historydataadr','btn_export')}"  id="btnExport" enabled="false"  click="onExport()" />
		
	</containers:AksControlBar>
	<security:Com_Security_Interface_HistoryDataADR_AdvancedDataGrid id="comAdgImHistoryData" dataProvider="{this.prvVar4dp4comAdgImHistoryData}" width="100%" height="100%" editable="true" allowMultipleSelection="true"/>
	
</mx:Module>
