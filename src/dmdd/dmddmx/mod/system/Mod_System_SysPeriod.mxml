<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" layout="vertical" width="100%" height="100%" paddingLeft="10" paddingRight="10"
		   creationComplete="creationCompleteHandler(event)" xmlns:common="dmdd.dmddmx.com.common.*"
		   xmlns:containers="aks.aksmx.containers.*" xmlns:system="dmdd.dmddmx.com.system.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:RemoteObject endpoint="{ClientEnvironment.endpoint}" id="srvSystem" destination="SystemService">
			<s:method name="getSysPeriod" result="resultHandler4getSysPeriod(event)" fault="faultHandler4getSysPeriod(event)">
			</s:method>			
			<s:method name="getPeriodRollTasks" result="resultHandler4getPeriodRollTasks(event)" fault="faultHandler4getPeriodRollTasks(event)">
			</s:method>	
			<s:method name="createPeriodRollTasks" result="resultHandler4createPeriodRollTasks(event)" fault="faultHandler4createPeriodRollTasks(event)">
			</s:method>				
		</s:RemoteObject>				
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("mod_system_sysperiod")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import aks.aksas.utils.UtilUi;
			import aks.aksmx.controls.AksWindowStop;
			
			import dmdd.dmddas.common.constant.BizConst;
			import dmdd.dmddas.common.system.ClientEnvironment;
			import dmdd.dmddas.common.utils.UtilExceptionLocale;
			import dmdd.dmddas.common.utils.UtilPeriod;
			import dmdd.dmddas.dataaccess.bizobject.BForecastErrorMappingModel;
			import dmdd.dmddas.dataaccess.bizobject.BPeriodRollTask;
			import dmdd.dmddas.dataaccess.bizobject.BSysPeriod;
			import dmdd.dmddas.common.constant.SkinConst;
			
			import com.cool.assets.CoolAssetsFile;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			
			//	描述    begin
			//	描述    end
			
			//	0	输入参数    begin						
			//	0	输入参数    end
			
			//	1	输出参数    begin
			//	1	输出参数    end
			
			//	2	本地变量    begin	
			[Bindable]
			private var prvVar4dp4comAdgPeriodRollTask:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var prvVar4currSysPeriod:BSysPeriod = null;			
			[Bindable]
			private var prvVar4nextSysPeriod:BSysPeriod = null;
			//	2	本地变量    end			
			
			//	3	公共方法    begin			
			//	3	公共方法    end		
			
			//	4	初始化方法    begin	
			protected function creationCompleteHandler(event:FlexEvent):void
			{				
				this.onRefreshPeriod();					
			}			
			//	4	初始化方法    end				
			
			//	5	事件响应方法    begin		
			private function onRefreshPeriod():void
			{
				UtilUi.pubFun4PopWaitWindow( this );
				this.srvSystem.getSysPeriod();
			}
			
			private function faultHandler4getSysPeriod(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('main','alt_title_warn') );
			}
			
			private function resultHandler4getSysPeriod(event:ResultEvent):void 
			{
				var sysPeriod:BSysPeriod = BSysPeriod(event.result);
				ClientEnvironment.setSysPeriod( sysPeriod );
				this.prvVar4currSysPeriod = ClientEnvironment.getSysPeriod();
				this.prvFun4setNextSysPeriod();
				UtilUi.pubFun4RemoveWaitWindow();
				
				this.onRefreshPeriodRollTask();								
			}
			
			private function onRefreshPeriodRollTask():void
			{
				UtilUi.pubFun4PopWaitWindow( this );				
				this.srvSystem.getPeriodRollTasks( ClientEnvironment.getSysPeriod() );
			}			
			
			private function faultHandler4getPeriodRollTasks(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('main','alt_title_warn') );
			}
			
			private function resultHandler4getPeriodRollTasks(event:ResultEvent):void 
			{
				this.prvVar4dp4comAdgPeriodRollTask = ArrayCollection(event.result);
				UtilUi.pubFun4RemoveWaitWindow();

				var i:int;
				var periodRollTask:BPeriodRollTask = null;
				var blAllRunned:Boolean = false;
				
				if( this.prvVar4dp4comAdgPeriodRollTask != null && this.prvVar4dp4comAdgPeriodRollTask.length > 0 )
				{
					this.btnCreatePeriodRollTask.enabled = false;
					
					blAllRunned = true;
					for( i=0; i<this.prvVar4dp4comAdgPeriodRollTask.length; i=i+1 )
					{
						periodRollTask = BPeriodRollTask( this.prvVar4dp4comAdgPeriodRollTask.getItemAt( i ) );
						if( periodRollTask.status != BizConst.PERIODROLLTASK_STATUS_RUNNED )
						{
							blAllRunned = false;
							break;
						}
					}
					
					if( blAllRunned == true )
					{
						//	滚动任务全部完成后，提示用户退出系统重新登录	begin
						//	AksWindowStop 是个不响应事件的弹出窗，逼迫用户只能关闭系统
						var aksWindowStop:AksWindowStop = AksWindowStop(PopUpManager.createPopUp(this, AksWindowStop, true));
						PopUpManager.centerPopUp( aksWindowStop );
												
						aksWindowStop.title = resourceManager.getString('mod_system_sysperiod','alert_title_hint'); 
						aksWindowStop.pubFun4setParamIn4message(resourceManager.getString('mod_system_sysperiod','alert_msg_taskallrunned'));				
						//	滚动任务全部完成后，提示用户退出系统重新登录	end						
					}
					else
					{
						var alert_title_hint:String = resourceManager.getString('mod_system_sysperiod','alert_title_hint');
						var alert_msg:String = null;						 
												
						if( ClientEnvironment.systemStatus == BizConst.SYSTEM_STATUS_ROLLINGPERIOD )
						{
							alert_msg = resourceManager.getString('mod_system_sysperiod','alert_msg_taskrunning');
						}
						else
						{
							alert_msg = resourceManager.getString('mod_system_sysperiod','alert_msg_taskrunning_exception');
						}
						Alert.show(alert_msg, alert_title_hint);

					}	
					
				}
				else
				{
					//	本期还没创建滚动任务，可以滚动
					this.btnCreatePeriodRollTask.enabled = true;
				}
			}			
						

			private function onCreatePeriodRollTask():void
			{
				var alert_title_hint:String = resourceManager.getString('mod_system_sysperiod','alert_title_hint');
				var alert_msg_deleteconfirm:String = resourceManager.getString('mod_system_sysperiod','alert_msg_runconfirm');
				
				Alert.show( alert_msg_deleteconfirm, alert_title_hint, Alert.OK | Alert.CANCEL, this, deleteConfirmHandler, null, Alert.OK );
				
			}				
			
			private function deleteConfirmHandler(event:CloseEvent):void
			{
				if( event.detail == Alert.OK )
				{
					UtilUi.pubFun4PopWaitWindow( this );	
					this.srvSystem.createPeriodRollTasks( ClientEnvironment.getSysPeriod() );								
				}
			}	
				
			private function faultHandler4createPeriodRollTasks(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('main','alt_title_warn') );
			}
			
			private function resultHandler4createPeriodRollTasks(event:ResultEvent):void 
			{
				UtilUi.pubFun4RemoveWaitWindow();
//				var alert_title_hint:String = resourceManager.getString('mod_system_sysperiod','alert_title_hint');
//				var alert_msg:String = resourceManager.getString('mod_system_sysperiod','alert_msg_createtasksucceed');
//				Alert.show(alert_msg, alert_title_hint);
				
				//	modified by liuzhen 2010.11.13	begin
				/*
				this.onRefreshPeriodRollTask();
				*/
				//	改为滚动任务创建完成后，提示用户退出系统重新登录	begin
				//	AksWindowStop 是个不响应事件的弹出窗，逼迫用户只能关闭系统
				var aksWindowStop:AksWindowStop = AksWindowStop(PopUpManager.createPopUp(this, AksWindowStop, true));
				PopUpManager.centerPopUp( aksWindowStop );
			
				aksWindowStop.title = resourceManager.getString('mod_system_sysperiod','alert_title_hint'); 
				aksWindowStop.pubFun4setParamIn4message(resourceManager.getString('mod_system_sysperiod','alert_msg_createtasksucceed'));		

				//	改为滚动任务创建完成后，提示用户退出系统重新登录	end
				//	modified by liuzhen 2010.11.13	end
			}			
			//	5	事件响应方法    end
			
			//	6	本地方法    begin
			private function prvFun4setNextSysPeriod():void
			{
				this.prvVar4nextSysPeriod = new BSysPeriod();
				this.prvVar4nextSysPeriod.compilePeriod = UtilPeriod.getPeriod( ClientEnvironment.getSysPeriod().compilePeriod, 1 );
				this.prvVar4nextSysPeriod.historyValidPeriod = UtilPeriod.getPeriod( ClientEnvironment.getSysPeriod().historyValidPeriod, 1 );
				this.prvVar4nextSysPeriod.forecastRunPeriod = UtilPeriod.getPeriod( ClientEnvironment.getSysPeriod().forecastRunPeriod, 1 );
				this.prvVar4nextSysPeriod.historyOpenPeriod = UtilPeriod.getPeriod( ClientEnvironment.getSysPeriod().historyOpenPeriod, 1 );
				this.prvVar4nextSysPeriod.forecastDispPeriod = UtilPeriod.getPeriod( ClientEnvironment.getSysPeriod().forecastDispPeriod, 1 );
				
				this.prvVar4nextSysPeriod.periodNumPerYear = ClientEnvironment.getSysPeriod().periodNumPerYear;
				this.prvVar4nextSysPeriod.comments = ClientEnvironment.getSysPeriod().comments;				
			}
			//	6	本地方法   end	
			
		]]>
	</fx:Script>
	<common:LabelBoundary paddingTop="5" labelText="{resourceManager.getString('mod_system_sysperiod','sysperiod')}" />

	<containers:AksControlBar>
		<s:Button label="{resourceManager.getString('mod_system_sysperiod','btn_refreshperiod')}" 	icon="{CoolAssetsFile.refresh3Icon}"	click="onRefreshPeriod()"/>
		<s:Button label="{resourceManager.getString('mod_system_sysperiod','btn_createperiodrolltask')}" 	click="onCreatePeriodRollTask()"	id="btnCreatePeriodRollTask" />			
	</containers:AksControlBar>
	
	<s:BorderContainer width="100%" height="125">
		<s:layout>
			<s:VerticalLayout paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"/>
		</s:layout>
		<mx:Label text="{resourceManager.getString('mod_system_sysperiod','currentperiod')}"/>
		<mx:Grid width="100%">
			<mx:GridRow width="100%" height="100%">
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
					<s:Label text="{resourceManager.getString('mod_system_sysperiod','compileperiod')}"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%" verticalAlign="middle">
					<s:TextInput width="100%" enabled="false" text="{this.prvVar4currSysPeriod.compilePeriod}"/>
				</mx:GridItem>
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
				</mx:GridItem>
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
					<s:Label text="{resourceManager.getString('mod_system_sysperiod','historyvalidperiod')}"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%" verticalAlign="middle">
					<s:TextInput width="100%" enabled="false" text="{this.prvVar4currSysPeriod.historyValidPeriod}"/>
				</mx:GridItem>
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
				</mx:GridItem>
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
					<s:Label text="{resourceManager.getString('mod_system_sysperiod','forecastrunperiod')}"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%" verticalAlign="middle">
					<s:TextInput width="100%" enabled="false" text="{this.prvVar4currSysPeriod.forecastRunPeriod}"/>
				</mx:GridItem>
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
				</mx:GridItem>
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
					<s:Label text="{resourceManager.getString('mod_system_sysperiod','historyopenperiod')}"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%" verticalAlign="middle">
					<s:TextInput width="100%" enabled="false" text="{this.prvVar4currSysPeriod.historyOpenPeriod}"/>
				</mx:GridItem>							
			</mx:GridRow>
		</mx:Grid>
		<mx:Spacer height="10"/>
		<s:Label text="{resourceManager.getString('mod_system_sysperiod','nextperiod')}"/>
		<mx:Grid width="100%">
			<mx:GridRow width="100%" height="100%">
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
					<s:Label text="{resourceManager.getString('mod_system_sysperiod','compileperiod')}"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%" verticalAlign="middle">
					<s:TextInput width="100%" enabled="false" text="{this.prvVar4nextSysPeriod.compilePeriod}"/>
				</mx:GridItem>
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
				</mx:GridItem>
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
					<s:Label text="{resourceManager.getString('mod_system_sysperiod','historyvalidperiod')}"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%" verticalAlign="middle">
					<s:TextInput width="100%" enabled="false" text="{this.prvVar4nextSysPeriod.historyValidPeriod}"/>
				</mx:GridItem>
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
				</mx:GridItem>
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
					<s:Label text="{resourceManager.getString('mod_system_sysperiod','forecastrunperiod')}"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%" verticalAlign="middle">
					<s:TextInput width="100%" enabled="false" text="{this.prvVar4nextSysPeriod.forecastRunPeriod}"/>
				</mx:GridItem>
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
				</mx:GridItem>
				<mx:GridItem width="25%" height="100%" verticalAlign="middle">
					<s:Label text="{resourceManager.getString('mod_system_sysperiod','historyopenperiod')}"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%" verticalAlign="middle">
					<s:TextInput width="100%" enabled="false" text="{this.prvVar4nextSysPeriod.historyOpenPeriod}"/>
				</mx:GridItem>								
			</mx:GridRow>
		</mx:Grid>					
	</s:BorderContainer>
	
	<common:LabelBoundary paddingTop="5" labelText="{resourceManager.getString('mod_system_sysperiod','periodrolltask')}" />

	<containers:AksControlBar>
		<s:Button label="{resourceManager.getString('mod_system_sysperiod','btn_refreshperiodrolltask')}" icon="{CoolAssetsFile.refresh3Icon}" click="onRefreshPeriodRollTask()"/>
	</containers:AksControlBar>		
	<system:Com_System_PeriodRollTask_AdvancedDataGrid dataProvider="{this.prvVar4dp4comAdgPeriodRollTask}" width="100%" height="100%"/>



</mx:Module>
