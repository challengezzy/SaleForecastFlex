<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" layout="vertical" width="100%" height="100%" paddingLeft="10" paddingRight="10"
		   creationComplete="creationCompleteHandler(event)" 
		   xmlns:common="dmdd.dmddmx.com.common.*"
		   xmlns:forecast="dmdd.dmddmx.com.forecast.*" xmlns:controls="aks.aksmx.controls.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:RemoteObject endpoint="{ClientEnvironment.endpoint}" id="srvForecast" destination="ForecastService">
			<s:method name="getForecastMakeLogsStat" result="resultHandler4getForecastMakeLogsStat(event)" fault="faultHandler4getForecastMakeLogsStat(event)">
			</s:method>			
			<s:method name="getForecastMakeLogs" result="resultHandler4getForecastMakeLogs(event)" fault="faultHandler4getForecastMakeLogs(event)">
			</s:method>		
			<s:method name="getForecastMakeLog" result="resultHandler4getForecastMakeLog(event)" fault="faultHandler4getForecastMakeLog(event)">
			</s:method>	
		</s:RemoteObject>		
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("mod_forecast_forecastmakelog_query")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import aks.aksas.utils.UtilUi;
			
			import dmdd.dmddas.common.constant.BizConst;
			import dmdd.dmddas.common.system.ClientEnvironment;
			import dmdd.dmddas.common.utils.UtilExceptionLocale;
			import dmdd.dmddas.common.utils.UtilPeriod;
			import dmdd.dmddas.dataaccess.bizobject.BForecastMakeLog;
			import dmdd.dmddas.dataaccess.bizobject.BForecastMakeLogAuditItem;
			import dmdd.dmddas.dataaccess.bizobject.BForecastMakeLogHfcItem;
			import dmdd.dmddas.dataaccess.bizobject.BForecastMakeLogProOrg;
			import dmdd.dmddas.dataaccess.bizobject.BUnit;
			import dmdd.dmddas.common.constant.SkinConst;
			import com.cool.assets.CoolAssetsFile;

			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			
			//	描述    begin
			//	描述    end
			
			//	0	输入参数    begin						
			//	0	输入参数    end
			
			//	1	输出参数    begin
			//	1	输出参数    end
			
			//	2	本地变量    begin	
			[Bindable]
			private var prvVar4dp4comAdgForecastMakeLog:ArrayCollection = new ArrayCollection();
			
			private var prvVar4sqlRestriction:String = null;	
			
			[Bindable]
			private var prvVar4selectedNum:int = -1;
			//	2	本地变量    end			
			
			//	3	公共方法    begin			
			//	3	公共方法    end		
			
			//	4	初始化方法    begin	
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				this.comQCond.qcondTxtCompilePeriod.text = String(ClientEnvironment.getSysPeriod().compilePeriod);
			}			
			//	4	初始化方法    end				
			
			//	5	事件响应方法    begin		
			private function callbackFunction4query4comQCond():void
			{				
				this.prvVar4sqlRestriction = this.comQCond.pubFun4getParamOut4sqlRestriction();
				var blPageQuery:Boolean = this.comQCond.pubFun4getParamOut4blPageQuery();
				
				if( blPageQuery == true )
				{	
					UtilUi.pubFun4PopWaitWindow( this );
					this.srvForecast.getForecastMakeLogsStat( this.prvVar4sqlRestriction );	
				}
				else
				{	
					//	不分页查询
					UtilUi.pubFun4PopWaitWindow( this );
					this.srvForecast.getForecastMakeLogs( this.prvVar4sqlRestriction, true, true, true, -1, ClientEnvironment.getSysParamPageSize() );
				}								
			}			
			
			//	分页查询相关		begin
			private function faultHandler4getForecastMakeLogsStat(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('main','alt_title_warn') );
			}	
			
			private function resultHandler4getForecastMakeLogsStat(event:ResultEvent):void 
			{
				//	初始化数据表格控制板
				var rstSize:Number = Number(event.result);
				this.comAksDataGridControlBar.pubFun4setResultParams( true, rstSize, ClientEnvironment.getSysParamPageSize() );
				
				//	去执行第一页查询
				this.srvForecast.getForecastMakeLogs( this.prvVar4sqlRestriction, true, true, true, 1, ClientEnvironment.getSysParamPageSize() );
			}
			
			private function prvFun4pageQueryForecastMakeLogs( _pageIndex:int ):void
			{
				UtilUi.pubFun4PopWaitWindow( this );
				this.srvForecast.getForecastMakeLogs( this.prvVar4sqlRestriction, true, true, true, _pageIndex, ClientEnvironment.getSysParamPageSize() );					
			}			
			//	分页查询相关		end
			
			
			private function faultHandler4getForecastMakeLogs(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('main','alt_title_warn') );
			}	
			
			private function resultHandler4getForecastMakeLogs(event:ResultEvent):void 
			{
				this.prvVar4dp4comAdgForecastMakeLog = ArrayCollection(event.result);				
				
				
				if( this.comQCond.pubFun4getParamOut4blPageQuery() == false )
				{
					//	不是分页查询，需要根据查询结果初始化数据表格控制板
					this.comAksDataGridControlBar.pubFun4setResultParams( false, this.prvVar4dp4comAdgForecastMakeLog.length, this.prvVar4dp4comAdgForecastMakeLog.length );
				}
				
				UtilUi.pubFun4RemoveWaitWindow();
			}				
			
			
			
			private function onChange4comAdgForecastMakeLog():void
			{
				if(this.comAdgForecastMakeLog.selectedIndex>-1)
				{
					var forecastmakelog:BForecastMakeLog = BForecastMakeLog(this.comAdgForecastMakeLog.selectedItem);
					this.prvVar4selectedNum = this.comAdgForecastMakeLog.selectedIndex;
					if(forecastmakelog.isGetDeatil == false)
					{
						this.srvForecast.getForecastMakeLog(forecastmakelog.id);
						UtilUi.pubFun4PopWaitWindow(this);
					}
				}
			}
			
			private function faultHandler4getForecastMakeLog(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('main','alt_title_warn') );
			}	
			
			private function resultHandler4getForecastMakeLog(event:ResultEvent):void 
			{
				UtilUi.pubFun4RemoveWaitWindow();
				var selectedForecastMakeLog:BForecastMakeLog =  BForecastMakeLog(event.result);
				selectedForecastMakeLog.isGetDeatil = true;
				this.prvVar4dp4comAdgForecastMakeLog.removeItemAt(this.prvVar4selectedNum);
				this.prvVar4dp4comAdgForecastMakeLog.addItemAt(selectedForecastMakeLog,this.prvVar4selectedNum);
				this.comAdgForecastMakeLog.selectedItem = selectedForecastMakeLog;
				
				//管理单位处理
				
				var forecastMakeLogHfcItems:ArrayCollection;
				var forecastMakeLogProOrgs:ArrayCollection;
	
				var unit:BUnit;

				forecastMakeLogProOrgs = selectedForecastMakeLog.forecastMakeLogProOrgs;
				var forecastMakeLogProOrg:BForecastMakeLogProOrg;
				unit=null;
				for(var k:int = 0;k<forecastMakeLogProOrgs.length;k++)
				{
					forecastMakeLogProOrg = BForecastMakeLogProOrg(forecastMakeLogProOrgs.getItemAt(k));
					if(unit==null)
					{
						unit = forecastMakeLogProOrg.product.unit;
					}
					else
					{
						if(forecastMakeLogProOrg.product!=null && unit.id!=forecastMakeLogProOrg.product.unit.id)
						{
							unit = forecastMakeLogProOrg.product.unitGroup.getBaseUnit();
						}
					}					
				}	
				
				//先获取管理单位
				forecastMakeLogHfcItems = selectedForecastMakeLog.forecastMakeLogHfcItems;
				var forecastMakeLogHFCItem:BForecastMakeLogHfcItem ;
				
				for(var j:int =0;forecastMakeLogHfcItems!=null && j<forecastMakeLogHfcItems.length;j++)
				{
					forecastMakeLogHFCItem = BForecastMakeLogHfcItem(forecastMakeLogHfcItems.getItemAt(j));
					if(forecastMakeLogHFCItem.product!=null)
					{
						if(unit!=null && forecastMakeLogHFCItem.product.unit!=null && unit.id ==forecastMakeLogHFCItem.product.unit.id)
						{
							forecastMakeLogHFCItem.exchangeUnit(1,unit.exchangeRate);
						}						
						else if(forecastMakeLogHFCItem.product.unit!=null)
						{
							forecastMakeLogHFCItem.exchangeUnit(1,forecastMakeLogHFCItem.product.unit.exchangeRate);
						}								
					}
					else
					{
						if(unit!=null)
						{
							forecastMakeLogHFCItem.exchangeUnit(1,unit.exchangeRate);
						}
					}
					
				}	

				
				if( selectedForecastMakeLog.actionType == BizConst.FORECASTMAKELOG_ACTIONTYPE_HFC )
				{
					this.tab4proOrg.enabled = true;
					this.tab4hfcItem.enabled = true;
					this.tab4auditItem.enabled = false;
					
					if( this.tabNav4detail.selectedChild == this.tab4auditItem )
					{
						this.tabNav4detail.selectedChild = this.tab4hfcItem;
					}
					
					if( this.comAdgForecastMakeLogHfcItem == null )
					{
						return;
					}
					
					var arrForecastMakeLogHfcItems:ArrayCollection = selectedForecastMakeLog.forecastMakeLogHfcItems;
					if( arrForecastMakeLogHfcItems == null || arrForecastMakeLogHfcItems.length <=0 )
					{
						this.comAdgForecastMakeLogHfcItem.setVisible4Dimension( false, false, false, false );
						return;	
					}
					
					var blDispProduct:Boolean = false;
					var blDispProductCharacter:Boolean = false;
					var blDispOrganization:Boolean = false;
					var blDispOrganizationCharacter:Boolean = false;
					
					var forecastMakeLogHfcItem:BForecastMakeLogHfcItem = null;
					var i:int;
					for( i=0; i<arrForecastMakeLogHfcItems.length; i=i+1 )
					{
						if( (blDispProduct || blDispProductCharacter ) && (blDispOrganization || blDispOrganizationCharacter) )
						{
							//	最多列的可能
							break;
						}
						
						// 有可能不整齐，所以都检查过来，而不是取一个就行
						forecastMakeLogHfcItem = BForecastMakeLogHfcItem( arrForecastMakeLogHfcItems.getItemAt( i ) );
						if( forecastMakeLogHfcItem.product != null )
						{
							blDispProduct = true;
						}
						if( forecastMakeLogHfcItem.productCharacter != null )
						{
							blDispProductCharacter = true;
						}
						if( forecastMakeLogHfcItem.organization != null )
						{
							blDispOrganization = true;
						}
						if( forecastMakeLogHfcItem.organizationCharacter != null )
						{
							blDispOrganizationCharacter = true;
						}					
					}
					this.comAdgForecastMakeLogHfcItem.setVisible4Dimension( blDispProduct, blDispProductCharacter, blDispOrganization, blDispOrganizationCharacter );										
				} 
				else
				{
					this.tab4proOrg.enabled = true;
					this.tab4hfcItem.enabled = false;
					this.tab4auditItem.enabled = true;
					if( this.tabNav4detail.selectedChild == this.tab4hfcItem )
					{
						this.tabNav4detail.selectedChild = this.tab4auditItem;
					}
				}	
			}
			
			protected function tabNav4detail_changeHandler(event:IndexChangedEvent):void
			{
				this.onChange4comAdgForecastMakeLog();
			}			
			//	5	事件响应方法    end
			
			//	6	本地方法    begin
			//	6	本地方法   end	
			
		]]>
	</fx:Script>
	
	<forecast:Com_Forecast_ForecastMakeLog_QueryCond width="100%" id="comQCond" paramIn4queryCallback4thisObject="{this}" paramIn4queryCallback4function="{this.callbackFunction4query4comQCond}" paramIn4enabled="{true}">
	</forecast:Com_Forecast_ForecastMakeLog_QueryCond>			
	
	<mx:VDividedBox width="100%" height="100%">
		<mx:VBox width="100%" height="100%">
			<common:LabelBoundary paddingTop="5" labelText="{resourceManager.getString('mod_forecast_forecastmakelog_query','forecastmakelog')}" />

			<controls:AksDataGridControlBar id="comAksDataGridControlBar" width="100%" paramIn4callback4thisObject="{this}" paramIn4callback4queryFunction="{this.prvFun4pageQueryForecastMakeLogs}" paramIn4dataGrid="{this.comAdgForecastMakeLog}">
			</controls:AksDataGridControlBar>	
			<forecast:Com_Forecast_ForecastMakeLog_AdvancedDataGrid id="comAdgForecastMakeLog" dataProvider="{this.prvVar4dp4comAdgForecastMakeLog}" change="onChange4comAdgForecastMakeLog()" width="100%" height="100%"/>
		</mx:VBox>

		<mx:VBox width="100%" height="100%">
			<common:LabelBoundary paddingTop="5" labelText="{resourceManager.getString('mod_forecast_forecastmakelog_query','forecastmakelog_details')}" />

			<mx:TabNavigator width="100%" height="100%" id="tabNav4detail" change="tabNav4detail_changeHandler(event)">
				<s:NavigatorContent label="{resourceManager.getString('mod_forecast_forecastmakelog_query','forecastmakelogproorg')}" id="tab4proOrg" width="100%" height="100%">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<forecast:Com_Forecast_ForecastMakeLogProOrg_AdvancedDataGrid width="100%" height="100%" dataProvider="{BForecastMakeLog(this.comAdgForecastMakeLog.selectedItem).forecastMakeLogProOrgs}"/>
					
				</s:NavigatorContent>
				<s:NavigatorContent label="{resourceManager.getString('mod_forecast_forecastmakelog_query','forecastmakeloghfcitem')}" id="tab4hfcItem" width="100%" height="100%">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<forecast:Com_Forecast_ForecastMakeLogHfcItem_AdvancedDataGrid id="comAdgForecastMakeLogHfcItem" width="100%" height="100%" dataProvider="{BForecastMakeLog(this.comAdgForecastMakeLog.selectedItem).forecastMakeLogHfcItems}"/>
				</s:NavigatorContent>
				<s:NavigatorContent label="{resourceManager.getString('mod_forecast_forecastmakelog_query','forecastmakelogaudititem')}" id="tab4auditItem" width="100%" height="100%">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<forecast:Com_Forecast_ForecastMakeLogAuditItem_AdvancedDataGrid id="comAdgForecastMakeLogAuditItem" width="100%" height="100%" dataProvider="{BForecastMakeLog(this.comAdgForecastMakeLog.selectedItem).forecastMakeLogAuditItems}"/>
				</s:NavigatorContent>				
			</mx:TabNavigator>			
		</mx:VBox>

				
	</mx:VDividedBox>
</mx:Module>
