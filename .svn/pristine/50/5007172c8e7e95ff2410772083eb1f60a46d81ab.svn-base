<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="600" height="400" close="onCancel()"
			   creationComplete="creationCompleteHandler(event)" >
	<s:layout>
		<s:VerticalLayout paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Metadata>
		[ResourceBundle("aks")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import aks.aksas.aidobject.AksOptionObj;
			import aks.aksas.controls.AksOptions;
			import aks.aksas.controls.AksOptionsSetting;
			import aks.aksas.utils.UtilUi;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			//	描述		begin
			//	描述		end
			
			//	0	输入参数    begin		
			private var paramIn4closeCallback4thisObject:Object = null;
			private var paramIn4closeCallback4function:Function = null;

			
			//	0	输入参数    end
			
			//	1	输出参数    begin
			private var paramOut4winCloseWay:int = UtilUi.WINDOW_CLOSEWAY_CANCEL;
			
			//	1	输出参数    end
			
			//	2	本地变量    begin
			private var prv4AksOptionsXML:XML = <option></option>
			//	2	本地变量    end			
			
			//	3	公共方法    begin	
			//	构造函数
			public function pubFun4constructor( _paramIn4closeCallback4thisObject:Object, _paramIn4closeCallback4function:Function ):void
			{
				this.pubFun4setParamIn4closeCallback( _paramIn4closeCallback4thisObject, _paramIn4closeCallback4function );
			}	
			
			//	关闭回调函数参数													
			public function pubFun4setParamIn4closeCallback( _thisObject:Object, _function:Function ):void
			{
				this.paramIn4closeCallback4thisObject = _thisObject;
				this.paramIn4closeCallback4function = _function;	
			}
			//	关闭方式参数
			public function pubFun4getParamOut4winCloseWay():int
			{
				return this.paramOut4winCloseWay;
			}
			//	关闭窗口
			private function prvFun4close():void
			{
				PopUpManager.removePopUp( this );	
				if( this.paramIn4closeCallback4thisObject != null && this.paramIn4closeCallback4function != null )
				{
					this.paramIn4closeCallback4function.call( this.paramIn4closeCallback4thisObject );
				}
			}				
						
			//	3	公共方法    end		
			
			//	4	初始化方法    begin			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				this.title =  resourceManager.getString('aks','title_options');;
				this.x = 100;
				this.y = 50;
				
				
			}						
			//	4	初始化方法    end				
			
			//	5	事件响应方法    begin			
			private function onOk():void
			{				
				if( this.prvFun4prepare4save() == true )
				{					
					//读取选项配置 begin
					var akssetting:AksOptionsSetting = new AksOptionsSetting(AksOptions.getConfigFilePath());
					var settings:XML = akssetting.setting;
					settings.insertChildBefore(null,prv4AksOptionsXML);
					akssetting.setting = settings;
					//读取选项配置 end.
					
					//	页面尺寸部分		end
					
					this.paramOut4winCloseWay = UtilUi.WINDOW_CLOSEWAY_OK;
					this.prvFun4close();
					
				}
			}			
			
			private function onCancel():void
			{
				this.paramOut4winCloseWay = UtilUi.WINDOW_CLOSEWAY_CANCEL;
				this.prvFun4close();
			}	
			
			//	5	事件响应方法    end
			
			//	6	本地方法    begin
			private function prvFun4prepare4save():Boolean
			{				
				//	serverOption
				prv4AksOptionsXML.@name = StringUtil.trim( this.txtConfigName.text);
				prv4AksOptionsXML.servername = StringUtil.trim( this.txtServerName.text );
				prv4AksOptionsXML.serverport = StringUtil.trim( this.txtServerPort.text );
				prv4AksOptionsXML.contextroot = StringUtil.trim( this.txtContextRoot.text );
				prv4AksOptionsXML.updateservername=StringUtil.trim(this.txtupdateservername.text);
				prv4AksOptionsXML.updateserverport=StringUtil.trim(this.txtServerPort.text);
				//	pageSize
				var pageSize:int = int( StringUtil.trim( this.txtPageSize.text ) );
				
				if( pageSize <= 0 )
				{
					prv4AksOptionsXML.pagesize = 20;
				}
				else
				{
					prv4AksOptionsXML.pagesize = pageSize;
				}
				
				return true;
			}			
			
			private function prvResetValue():void
			{
				this.txtConfigName.text = "";
				this.txtContextRoot.text = "";
				this.txtPageSize.text = "";
				this.txtServerName.text = "";
				this.txtServerPort.text = "";
				this.txtupdateservername.text = "";
				this.txtupdateserverport.text = "";				
			}
			//	6	本地方法   end						


		]]>
	</fx:Script>
	<mx:Grid width="100%">
		<mx:GridRow width="100%" height="100%" verticalAlign="middle">
			<mx:GridItem width="10%" height="100%" verticalAlign="middle">
				<s:Label text="{resourceManager.getString('aks','configname')}"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<s:TextInput id="txtConfigName" width="100%" maxChars="255" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%" verticalAlign="middle">
			<mx:GridItem width="10%" height="100%" verticalAlign="middle">
				<s:Label text="{resourceManager.getString('aks','servername')}"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<s:TextInput id="txtServerName" width="100%" maxChars="255" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%" verticalAlign="middle">
			<mx:GridItem width="10%" height="100%" verticalAlign="middle">
				<s:Label text="{resourceManager.getString('aks','serverport')}"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<s:TextInput id="txtServerPort" width="100%" maxChars="255" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%" verticalAlign="middle">
			<mx:GridItem width="10%" height="100%" verticalAlign="middle">
				<s:Label text="{resourceManager.getString('aks','contextroot')}"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<s:TextInput id="txtContextRoot" width="100%" maxChars="255" />
			</mx:GridItem>
		</mx:GridRow>	
		<mx:GridRow width="100%" height="100%" verticalAlign="middle">
			<mx:GridItem width="10%" height="100%" verticalAlign="middle">
				<s:Label text="{resourceManager.getString('aks','updateservername')}"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<s:TextInput id="txtupdateservername" width="100%" maxChars="255" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%" verticalAlign="middle">
			<mx:GridItem width="10%" height="100%" verticalAlign="middle">
				<s:Label text="{resourceManager.getString('aks','updateserverport')}"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<s:TextInput id="txtupdateserverport" width="100%" maxChars="255" />
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%" verticalAlign="middle">
			<mx:GridItem width="10%" height="100%" verticalAlign="middle">
				<s:Label text="{resourceManager.getString('aks','pagesize')}"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<s:TextInput id="txtPageSize" width="100%" maxChars="255" />
			</mx:GridItem>
		</mx:GridRow>		
	</mx:Grid>
	<s:BorderContainer width="100%" height="25" borderColor="#E4ECF7">
		<s:layout>
			<s:HorizontalLayout horizontalAlign="center"/>
		</s:layout>
		<s:Button label="{resourceManager.getString('aks','btn_ok')}" click="onOk()"/>
	</s:BorderContainer>

</s:TitleWindow>
