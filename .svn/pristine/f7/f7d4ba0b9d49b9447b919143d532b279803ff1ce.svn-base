<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" layout="vertical" width="100%" height="100%" 
		   paddingLeft="10" paddingRight="10"
		   creationComplete="creationCompleteHandler(event)" 
		   xmlns:security="dmdd.dmddmx.com.security.*" xmlns:uirowdata="dmdd.dmddmx.com.uirowdata.*" 
		   xmlns:controls="aks.aksmx.controls.*" xmlns:charts="aks.aksmx.charts.*" xmlns:containers="aks.aksmx.containers.*" xmlns:proorg="dmdd.dmddmx.com.proorg.*" xmlns:common="dmdd.dmddmx.com.common.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:RemoteObject endpoint="{ClientEnvironment.endpoint}" id="srvUiRowData" destination="UiRowDataService">	
			<s:method name="getUiRowDatas" result="resultHandler4getUiRowDatas(event)" fault="faultHandler4getUiRowDatas(event)">
			</s:method>							  
		</s:RemoteObject>
		<s:RemoteObject endpoint="{ClientEnvironment.endpoint}" id="srvUiRowData4expansion" destination="UiRowDataService">	
			<s:method name="getUiRowDatas" result="resultHandler4getUiRowDatas4expansion(event)" fault="faultHandler4getUiRowDatas4expansion(event)">
			</s:method>							  
		</s:RemoteObject>	
	</fx:Declarations>
	<fx:Metadata>
		[ResourceBundle("mod_report")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import aks.aksas.charts.AksChartDataObject;
			import aks.aksas.controls.AksLockDataGridObject;
			import aks.aksas.utils.UtilArrayCollection;
			import aks.aksas.utils.UtilUi;
			
			import com.cool.assets.CoolAssetsFile;
			import com.cool.utils.AlertUtil;
			import com.cool.utils.DataListExportUtil;
			
			import dmdd.dmddas.common.constant.BizConst;
			import dmdd.dmddas.common.constant.SysConst;
			import dmdd.dmddas.common.constant.UIConst;
			import dmdd.dmddas.common.system.ClientEnvironment;
			import dmdd.dmddas.common.utils.UtilExceptionLocale;
			import dmdd.dmddas.common.utils.UtilPeriod;
			import dmdd.dmddas.common.utils.UtilStrKey;
			import dmdd.dmddas.common.utils.UtilUiPopbScope;
			import dmdd.dmddas.common.utils.UtilUiRowData;
			import dmdd.dmddas.common.utils.UtilUiRowDataChart;
			import dmdd.dmddas.common.vo.UiCondVo;
			import dmdd.dmddas.dataaccess.aidobject.ABUiRowData;
			import dmdd.dmddas.dataaccess.bizobject.BBizDataDefItemKpi;
			import dmdd.dmddas.dataaccess.bizobject.BSysDictionaryItem;
			import dmdd.dmddas.dataaccess.bizobject.BUiPopbScope;
			import dmdd.dmddas.dataaccess.bizobject.BUnit;
			import dmdd.dmddas.dataaccess.bizobject.BUnitGroup;
			import dmdd.dmddmx.com.chart.ForecastDataChartWindow;
			import dmdd.dmddmx.com.proorg.Com_ProOrg_LayerSetWindow;
			import dmdd.dmddmx.com.uirowdata.Com_UiRowData_ColumnSet;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.formatters.NumberFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			
			
			//	描述    begin
			//	描述    end
			
			//	0	输入参数    begin						
			//	0	输入参数    end
			
			//	1	输出参数    begin
			//	1	输出参数    end
			
			//	2	本地变量    begin	
			[Bindable]
			private var dp4adgUiRowData:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var dp4comAdgUiRowData4excute:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var dp4comAdgUiRowDatabak:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var arrDictBizDataType:ArrayCollection = ClientEnvironment.getBizDataTypeArr();	
			
			//条件中是否选中对应项
			private var isDisPro:Boolean = false;
			private var isDisProChar:Boolean = false;
			private var isDisOrg:Boolean = false;
			private var isDisOrgChar:Boolean = false;
			
			/** 可选单位 */
			[Bindable]
			private var arrUnits:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var unitGroup:BUnitGroup = null;
			private var unit:BUnit = null;
			
			//	 显示设置		end
			
			
			//	查询条件		begin
			private var uiCondVo:UiCondVo; //快速查询条件，转换后
			private var uiPopbScope:BUiPopbScope;
			
			private var qcondArrUiRowDataProOrgs:ArrayCollection = new ArrayCollection();
			private var qcondArrBizDatas:ArrayCollection = new ArrayCollection();
			
			private var qcondPeriodBegin:int;
			private var qcondPeriodEnd:int;
			//	查询条件		end
			[Bindable]
			private var uiRowDataRunNum:int = 0;//标记运行到第几个
			[Bindable]
			private var changeColor:ArrayCollection = new ArrayCollection();//标记需要改变颜色的行
				
			/** 图形展示 */
			private var chartWindow:ForecastDataChartWindow;
			
			/** 分层计算设置窗口 */
			private var layerSetWindow:Com_ProOrg_LayerSetWindow;
			
			private var isLayerSeted:Boolean = false; //是否已经设置了基准层次
			//	2	本地变量    end		
			
			//	3	公共方法    begin			
			//	3	公共方法    end		
			
			//	4	初始化方法    begin	
			protected function creationCompleteHandler(event:FlexEvent):void
			{				
				//增加右键锁定模块 begin
				var aksright_edit:AksLockDataGridObject = new AksLockDataGridObject(adgUiRowData);				
				//增加右键锁定模块 end
			}					
			//	4	初始化方法    end				
			
			//	5	事件响应方法    begin	
			private function callbackFunction4execute4comProOrgBizDataPeriodScope():void
			{
				if(isLayerSeted == false){
					AlertUtil.show("请设置汇总层次!");
					return;
				}
				
				uiPopbScope = condSetComp.getUiPopbScope();
				uiCondVo = UtilUiPopbScope.getUiScopeCondVo(uiPopbScope,this);
				
				if(uiCondVo.isValid == false){
					AlertUtil.show(uiCondVo.inValidStr,AlertUtil.MESSAGE_ERROR);
					return;
				}
				//设置单位
				unitGroup = uiCondVo.unitGroup;
				unit = uiCondVo.unit;
				unitGroupSet(unit);
				
				//	从 comProOrgBizDataPeriodScope中取得查询条件
				qcondArrUiRowDataProOrgs = uiCondVo.arrUiRowDataProOrgs;
				qcondArrBizDatas = uiCondVo.arrBizDatas;
				
				//	从 comPeriodSpan 取得查询期间
				qcondPeriodBegin = uiCondVo.periodBegin;
				qcondPeriodEnd = uiCondVo.periodEnd;
				
				refreshColumnDispControlSet(1);
				adgUiRowData.pubFun4setParamIo4periodBeginEnd( qcondPeriodBegin, qcondPeriodEnd, false );
				
				var blPageProOrg:Boolean = condSetComp.isPageProOrg;
				if( blPageProOrg == true )
				{	
					//	初始化数据表格控制板
					comAksDataGridControlBar.pubFun4setResultParams( true, qcondArrUiRowDataProOrgs.length, ClientEnvironment.getSysParamPageSize() );
					
					//	去执行第一页查询
					prvFun4pageQueryReportDatas( 1 );
				}
				else
				{	
					//	初始化数据表格控制板					
					comAksDataGridControlBar.pubFun4setResultParams( false, qcondArrUiRowDataProOrgs.length, qcondArrUiRowDataProOrgs.length );
					
					//	不分页查询
					UtilUi.pubFun4PopWaitWindow( this );
					dp4adgUiRowData = new ArrayCollection();
					srvUiRowData.getUiRowDatas( qcondArrUiRowDataProOrgs, qcondPeriodBegin, qcondPeriodEnd, qcondArrBizDatas, ClientEnvironment.getSysPeriod()  );
				}			
				
				//重置不显示0的勾选
				comAksDataGridControlBar.showzero.selected=false;
			}			
			
			//	分页查询相关		begin			
			private function prvFun4pageQueryReportDatas( _pageIndex:int ):void
			{
				UtilUi.pubFun4PopWaitWindow( this );
				var arrUiRowDataProOrgs:ArrayCollection = new ArrayCollection();
				var i:int;
				var pageSize:int = ClientEnvironment.getSysParamPageSize();
				var indexBegin:int = pageSize * (_pageIndex-1);
				var indexEnd:int = pageSize * _pageIndex;
				if( indexEnd > qcondArrUiRowDataProOrgs.length )
				{
					indexEnd = qcondArrUiRowDataProOrgs.length;
				}
				//	分页查询,根据pageIndex计算需要传递给服务器的查询条件
				for( i=indexBegin; i<indexEnd; i=i+1 )
				{
					arrUiRowDataProOrgs.addItem( qcondArrUiRowDataProOrgs.getItemAt(i) );	
				}
				
				
				dp4adgUiRowData = new ArrayCollection();
				srvUiRowData.getUiRowDatas( arrUiRowDataProOrgs, qcondPeriodBegin, qcondPeriodEnd, qcondArrBizDatas, ClientEnvironment.getSysPeriod()  );					
			}			
			//	分页查询相关		end		
			
			private function prvFun4ShowZero(notshow:Boolean):void
			{
				if(notshow)//去除为0的显示
				{
					var uiRowData:ABUiRowData;
					var remove:ArrayCollection = new ArrayCollection();
					for(var i:int=0; i<dp4adgUiRowData.length; i=i+1 )
					{
						uiRowData = ABUiRowData(dp4adgUiRowData.getItemAt(i));
						if(prv4CheckZero(uiRowData))
						{
							remove.addItem(uiRowData);
						}
					}
					dp4adgUiRowData = UtilArrayCollection.removeItems(dp4adgUiRowData,remove);
				}
				else
				{
					dp4adgUiRowData = new ArrayCollection();
					var uiRowData_new:ABUiRowData;
					for( i=0; i<dp4comAdgUiRowDatabak.length; i=i+1 )
					{
						uiRowData = ABUiRowData(dp4comAdgUiRowDatabak.getItemAt(i));
						uiRowData_new = new ABUiRowData();
						uiRowData_new.copyDeep(uiRowData);
						dp4adgUiRowData.addItem(uiRowData_new);
					}
					
				}
			}
			
			private function prv4CheckZero(uiRowData:ABUiRowData):Boolean
			{
				var value:Number;
				var periodDiff:int = UtilPeriod.getPeriodDifference( uiRowData.periodBegin, uiRowData.periodEnd );
				for(var periodLoc:int= 0; periodLoc <= periodDiff; periodLoc = periodLoc + 1 )
				{
					value = uiRowData.pubFun4getPeriodDataValue(periodLoc);
					if(value!=0)
					{
						return false;
					}
				}
				
				return true;
			}
			
			private function faultHandler4getUiRowDatas(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('main','alt_title_warn') );
			}	
			
			private function resultHandler4getUiRowDatas(event:ResultEvent):void 
			{
				btnExportData.enabled = true;
				btnRefreshChart.enabled = true;
				
				
				dp4comAdgUiRowData4excute = ArrayCollection(event.result);
				doexchangedata(dp4comAdgUiRowData4excute);
				if(dp4comAdgUiRowData4excute==null||dp4comAdgUiRowData4excute.length<1)
				{
					UtilUi.pubFun4RemoveWaitWindow();
					return ;
				}
				uiRowDataRunNum = 0;
				changeColor = new ArrayCollection();
				runUiRowData(uiRowDataRunNum);			
			}				
			
			private function runUiRowData(num:int):void
			{
				var uiRowData:ABUiRowData = ABUiRowData(dp4comAdgUiRowData4excute.getItemAt(num));
				layerSetWindow.pubFun4excuteProOrg(uiRowData);
				
				srvUiRowData4expansion.getUiRowDatas( layerSetWindow.pubFun4getParamOut4arrUiRowDataProOrgs(), qcondPeriodBegin, qcondPeriodEnd, qcondArrBizDatas, ClientEnvironment.getSysPeriod()  );					
			}
			
			private function faultHandler4getUiRowDatas4expansion(event:FaultEvent):void
			{
				UtilUi.pubFun4RemoveWaitWindow();
				Alert.show( UtilExceptionLocale.getExceptionMessageLocaleByFaultEvent( event ), resourceManager.getString('main','alt_title_warn') );
			}
			
			private function resultHandler4getUiRowDatas4expansion(event:ResultEvent):void 
			{
				var arrUiRowData:ArrayCollection = ArrayCollection(event.result);
				doexchangedata(arrUiRowData);
				//添加进dp4comAdgUiRowData
				dp4adgUiRowData.addAll(arrUiRowData);
				var uiRowData:ABUiRowData = ABUiRowData(dp4comAdgUiRowData4excute.getItemAt(uiRowDataRunNum ));
				dp4adgUiRowData.addItem(uiRowData);
				
				//改变颜色
				changeColor.addItem(UtilStrKey.getStrKey4PPcOOcB(uiRowData.product,uiRowData.productCharacter
				,uiRowData.organization,uiRowData.organizationCharacter,uiRowData.bizData));
				
				uiRowDataRunNum = uiRowDataRunNum  +1;
				if(uiRowDataRunNum <dp4comAdgUiRowData4excute.length)
				{
					runUiRowData(uiRowDataRunNum);
				}
				else if(uiRowDataRunNum ==dp4comAdgUiRowData4excute.length)
				{
					dp4comAdgUiRowDatabak = new ArrayCollection();
					var uiRowData_new:ABUiRowData;
					for( var i:int=0; i<dp4adgUiRowData.length; i=i+1 )
					{
						uiRowData = ABUiRowData(dp4adgUiRowData.getItemAt(i));
						uiRowData_new = new ABUiRowData();
						uiRowData_new.copyDeep(uiRowData);
						dp4comAdgUiRowDatabak.addItem(uiRowData_new);
					}
					UtilUi.pubFun4RemoveWaitWindow();
				}
			}
			
			private function doexchangedata(_uiRowData:ArrayCollection):void
			{
				var i:int;
				var seledtedUnit:BUnit = null;
				var uiRowData:ABUiRowData = null;
				
				var periodDiff:int;
				var periodLoc:int;
				var aitemValue:Number;
				var bitemValue:Number;
				var kpiValue:Number;
				var kpiFormula:int;
				
				var numberFormatter:NumberFormatter = new NumberFormatter();
				numberFormatter.precision = 2;
				var myPattern:RegExp = /,/g;//用来去掉格式化后的逗号
				
				if( _uiRowData != null )
				{
					seledtedUnit = BUnit(comboBoxUnit.selectedItem);		
					
					for( i=0; i<_uiRowData.length; i=i+1 )
					{
						uiRowData = ABUiRowData(_uiRowData.getItemAt(i));
						
						if( uiRowData.bizData.type != BizConst.BIZDATA_TYPE_KPI )
						{
							//	非Kpi数据换算后放入显示表格
							if( seledtedUnit != null && seledtedUnit.isBase == BizConst.GLOBAL_YESNO_NO )
							{
								uiRowData.exchangeUnit( 1, seledtedUnit.exchangeRate );						
							}						
						}
						else
						{
							if( seledtedUnit != null && seledtedUnit.isBase == BizConst.GLOBAL_YESNO_NO )
							{
								uiRowData.exchangeKPIUnit( 1, seledtedUnit.exchangeRate );						
							}
							if( uiRowData.bizData.bizDataDefItems != null && uiRowData.bizData.bizDataDefItems.length == 1 )
							{
								kpiFormula = BBizDataDefItemKpi(uiRowData.bizData.bizDataDefItems.getItemAt(0)).kpiFormula;
								
								//	kpi数据，计算真正的Kpi值
								periodDiff = UtilPeriod.getPeriodDifference( uiRowData.periodBegin, uiRowData.periodEnd );
								for( periodLoc = 0; periodLoc <= periodDiff; periodLoc = periodLoc + 1 )
								{
									aitemValue = uiRowData.pubFun4getPeriodDataValue( periodLoc );
									bitemValue = uiRowData.pubFun4getPeriodDataValueBak( periodLoc );
									
									if( kpiFormula == BizConst.BIZDATADEFITEM_KPIFORMULA_RATIO )
									{
										if( isNaN(aitemValue) || isNaN(bitemValue) )
										{
											uiRowData.pubFun4setPeriodDataValue( periodLoc, NaN );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, NaN );
										}
										else if( bitemValue == 0 )
										{
											uiRowData.pubFun4setPeriodDataValue( periodLoc, NaN );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, NaN );								
										}
										else
										{
											kpiValue = aitemValue / bitemValue * 100.0;
											kpiValue = Number( numberFormatter.format( kpiValue ).replace(myPattern,"" ));
											
											uiRowData.pubFun4setPeriodDataValue( periodLoc, kpiValue );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, kpiValue );									
										}										
									}
									else if( kpiFormula == BizConst.BIZDATADEFITEM_KPIFORMULA_INCREMENTRATIO )
									{
										if( isNaN(aitemValue) || isNaN(bitemValue) )
										{
											uiRowData.pubFun4setPeriodDataValue( periodLoc, NaN );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, NaN );
										}
										else if( bitemValue == 0 )
										{
											uiRowData.pubFun4setPeriodDataValue( periodLoc, NaN );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, NaN );								
										}
										else
										{
											kpiValue = Math.abs( aitemValue - bitemValue ) / bitemValue * 100.0;
											kpiValue = Number( numberFormatter.format( kpiValue ).replace(myPattern,"" ) );
											
											uiRowData.pubFun4setPeriodDataValue( periodLoc, kpiValue );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, kpiValue );									
										}											
									}
									else if( kpiFormula == BizConst.BIZDATADEFITEM_KPIFORMULA_INCREMENTRATIO_I )
									{
										if( isNaN(aitemValue) || isNaN(bitemValue) )
										{
											uiRowData.pubFun4setPeriodDataValue( periodLoc, NaN );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, NaN );
										}
										else if( bitemValue == 0 )
										{
											uiRowData.pubFun4setPeriodDataValue( periodLoc, NaN );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, NaN );								
										}
										else
										{
											kpiValue = (1 - Math.abs( aitemValue - bitemValue ) / bitemValue) * 100.0;
											kpiValue = Number( numberFormatter.format( kpiValue ).replace(myPattern,"" ) );
											
											uiRowData.pubFun4setPeriodDataValue( periodLoc, kpiValue );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, kpiValue );									
										}											
									}
									else if( kpiFormula == BizConst.BIZDATADEFITEM_KPIFORMULA_INCREMENTRATIO_II )
									{
										if( isNaN(aitemValue) )
										{
											aitemValue = 0;
										}
										if( isNaN(bitemValue) )
										{
											bitemValue = 0;
										}
										
										if( aitemValue + bitemValue == 0 )
										{
											//	分母为0
											uiRowData.pubFun4setPeriodDataValue( periodLoc, NaN );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, NaN );																		
										}
										else
										{
											kpiValue = 2.0 * Math.abs(aitemValue - bitemValue) / (aitemValue + bitemValue) * 100.0;
											kpiValue = Number( numberFormatter.format( kpiValue ).replace(myPattern,"" ) ); 
											
											uiRowData.pubFun4setPeriodDataValue( periodLoc, kpiValue );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, kpiValue );									
										}									
									}	
									else if(kpiFormula == BizConst.BIZDATADEFITEM_KPIFORMULA_INCREMENTRATIO_III)
									{
										if( isNaN(aitemValue) )
										{
											aitemValue = 0;
										}
										if( isNaN(bitemValue) )
										{
											bitemValue = 0;
										}
										kpiValue = (aitemValue - bitemValue)  ;
										kpiValue = Number( numberFormatter.format( kpiValue ).replace(myPattern,"" ) ); 
										
										uiRowData.pubFun4setPeriodDataValue( periodLoc, kpiValue );
										uiRowData.pubFun4setPeriodDataValueBak( periodLoc, kpiValue );
									}
									else if(kpiFormula == BizConst.BIZDATADEFITEM_KPIFORMULA_INCREMENTRATIO_IV)
									{
										if( isNaN(aitemValue) )
										{
											aitemValue = 0;
										}
										if( isNaN(bitemValue) )
										{
											bitemValue = 0;
										}
										kpiValue =  Math.abs(aitemValue - bitemValue) ;
										kpiValue = Number( numberFormatter.format( kpiValue ).replace(myPattern,"" ) ); 
										
										uiRowData.pubFun4setPeriodDataValue( periodLoc, kpiValue );
										uiRowData.pubFun4setPeriodDataValueBak( periodLoc, kpiValue );
									}
									else if(kpiFormula == BizConst.BIZDATADEFITEM_KPIFORMULA_INCREMENTRATIO_V)
									{
										if( isNaN(aitemValue) || isNaN(bitemValue) )
										{
											uiRowData.pubFun4setPeriodDataValue( periodLoc, NaN );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, NaN );
										}
										else if( bitemValue == 0 )
										{
											uiRowData.pubFun4setPeriodDataValue( periodLoc, NaN );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, NaN );								
										}
										else
										{
											kpiValue = ( aitemValue - bitemValue ) / bitemValue * 100.0;
											kpiValue = Number( numberFormatter.format( kpiValue ).replace(myPattern,"" ) );
											
											uiRowData.pubFun4setPeriodDataValue( periodLoc, kpiValue );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, kpiValue );									
										}	
									}
									else if(kpiFormula == BizConst.BIZDATADEFITEM_KPIFORMULA_INCREMENTRATIO_VI)
									{
										if( isNaN(aitemValue) || isNaN(bitemValue) )
										{
											uiRowData.pubFun4setPeriodDataValue( periodLoc, NaN );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, NaN );
										}
										else if( bitemValue == 0 )
										{
											uiRowData.pubFun4setPeriodDataValue( periodLoc, NaN );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, NaN );								
										}
										else if(aitemValue<0 || bitemValue<0)
										{
											uiRowData.pubFun4setPeriodDataValue( periodLoc, 0 );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, 0 );	
										}
										else
										{
											if(aitemValue<bitemValue)
											{
												kpiValue = aitemValue / bitemValue * 100.0;
												kpiValue = Number( numberFormatter.format( kpiValue ) );
											}
											else
											{
												kpiValue = bitemValue / aitemValue * 100.0;
												kpiValue = Number( numberFormatter.format( kpiValue ) );
											}
											
											uiRowData.pubFun4setPeriodDataValue( periodLoc, kpiValue );
											uiRowData.pubFun4setPeriodDataValueBak( periodLoc, kpiValue );									
										}	
									}
									else
									{
										//	out of design
										uiRowData.pubFun4setPeriodDataValue( periodLoc, NaN );
										uiRowData.pubFun4setPeriodDataValueBak( periodLoc, NaN );										
									}
									
								}
								
							}
						}
						
					}					
				}
			}
			
			/** 设置单位组中的单位 */
			private function unitGroupSet(unit:BUnit):void
			{
				var unitGroupId:Number = unit.unitGroup.id;
				arrUnits = ClientEnvironment.getUnitGroup(unitGroupId).units;
				
				var selUnit:BUnit =null;
				for(var i:int=0;i<arrUnits.length;i++)
				{
					selUnit = BUnit(arrUnits.getItemAt(i));
					if(selUnit.id == unit.id)
					{	
						comboBoxUnit.selectedIndex = i; 
						comboBoxUnit.selectedItem = selUnit;
						break;
					}
				}
				
				comboBoxUnit.enabled = true;
			}
			
			private function onChange4comboBoxUnit():void
			{
				//	单位变化	begin
				var selectedUnit:BUnit = BUnit(comboBoxUnit.selectedItem)
				var i:int;
				
				var uiRowData:ABUiRowData = null;
				if( selectedUnit != null && unit != null && selectedUnit.id != unit.id )
				{
					if( dp4adgUiRowData != null )
					{
						for( i=0; i<dp4adgUiRowData.length; i=i+1 )
						{
							uiRowData = ABUiRowData(dp4adgUiRowData.getItemAt(i));
							uiRowData.exchangeUnit( unit.exchangeRate, selectedUnit.exchangeRate );
						}
					}	
					
					unit = selectedUnit;
				}
				//	单位变化	end
			}
			
			private function onLayerSet():void{
				//没有数据，不需要分层计算
				if (layerSetWindow == null){
					layerSetWindow = new Com_ProOrg_LayerSetWindow();
					layerSetWindow.onOkFunction = callbackOnLayerSetOK;
				}
				
				PopUpManager.addPopUp(layerSetWindow,this);
				PopUpManager.centerPopUp(layerSetWindow);
			}
			
			private function callbackOnLayerSetOK():void{
				isLayerSeted = true;
			}
			
			private function onColumnSet():void
			{
				if(uiCondVo == null)
					return; //还没查询过数据
				
				adgUiRowData.onColumnSet(null);
			}
			
			private function refreshColumnDispControlSet(type:Number):void{
				//3个入口，设置显示列 1，查询条件中执行后 2，分层计算后 3，列显示手工设置后
				
				if(type == 1){ 
					//1查询条件中执行后
					isDisPro = uiCondVo.isShowProduct;
					isDisProChar = uiCondVo.isShowProductCharacter;
					isDisOrg = uiCondVo.isShowOrganization;
					isDisOrgChar = uiCondVo.isShowOrganizationCharacter;
					
				}else if(type ==2){
					isDisPro = uiCondVo.isShowProduct || layerSetWindow.checkBoxProduct.selected;
					isDisProChar = uiCondVo.isShowProductCharacter || layerSetWindow.checkBoxProductCharacter.selected;
					isDisOrg = uiCondVo.isShowOrganization || layerSetWindow.checkBoxOrganization.selected;
					isDisOrgChar = uiCondVo.isShowOrganizationCharacter || layerSetWindow.checkBoxOrganizationCharacter.selected;
				}
				//同步设置
				adgUiRowData.setVisible4Dimension(isDisPro,isDisProChar,isDisOrg,isDisOrgChar);
				
			}
			
			private function onExport():void
			{				
				var TSVString:String = DataListExportUtil.generateCsvData(adgUiRowData,1) ;
				
				// Copy the TSV string to the clipboard
				System.setClipboard(TSVString);					
			}
			
			private function onRefreshChart():void
			{
				chartWindow = UtilUiRowDataChart.showRowDataChartWindow2(adgUiRowData,qcondPeriodBegin,qcondPeriodEnd);
			}
			
			//	5	事件响应方法    end
			
			//	6	本地方法    begin
			private function calcRowColor(
				item:Object, rowIndex:int, 
				dataIndex:int, color:uint):uint
			{
				var uiRowData:ABUiRowData  = ABUiRowData(item);
				var str:String = UtilStrKey.getStrKey4PPcOOcB(uiRowData.product,uiRowData.productCharacter,uiRowData.organization,uiRowData.organizationCharacter,uiRowData.bizData);
				if(changeColor.contains(str))
				{
					return 0xd6dbe0;
				}
				return color;
			}
			//	6	本地方法   end	
			
		]]>
	</fx:Script>
	
	<common:LabelBoundary paddingTop="5" labelText="{resourceManager.getString('mod_report','querycondition')}" />
	<s:HGroup width="100%" verticalAlign="middle">
		<security:Com_Security_ProOrg_BizData_Period_Quick id="condSetComp"
								uiCode="{UIConst.UICODE_REPORT_EXPANSION}" blAllowMultipleSelectionBizData="false"  
								arrDictBizDataType="{arrDictBizDataType}" blOnlyIsManagingBizData="false" 
								executeCallback4thisObject="{this}" executeCallback4function="{callbackFunction4execute4comProOrgBizDataPeriodScope}" >
		</security:Com_Security_ProOrg_BizData_Period_Quick>
		<s:Button id="btnLayerSet" click="onLayerSet()" label="{resourceManager.getString('mod_report','expansion_set')}" icon="{CoolAssetsFile.tree_sigIcon}"/>
	</s:HGroup>
	
	<common:LabelBoundary paddingTop="5" labelText="{resourceManager.getString('mod_report','reportdata_table')}" />
	<s:HGroup width="100%" verticalAlign="middle" paddingTop="3" paddingLeft="10">
		<s:Label text="{resourceManager.getString('note','unit')}" id="lbUnit"/>
		<s:ComboBox id="comboBoxUnit" dataProvider="{arrUnits}" change="onChange4comboBoxUnit()" enabled="false"/>
		<s:Spacer width="10" />
		<s:Button id="btnRefreshChart" click="onRefreshChart()" label="{resourceManager.getString('button','chartView')}" icon="{CoolAssetsFile.chart_lineIcon}" />
		<s:Button id="btnExportData" click="onExport()" label="{resourceManager.getString('button','export')}" icon="{CoolAssetsFile.excelIcon}"/>
		<s:Button id="btnColumnSet" click="onColumnSet()" label="{resourceManager.getString('button','columnViewSet')}" icon="{CoolAssetsFile.optsetIcon}"/>
	</s:HGroup>
	<uirowdata:Com_UiRowData_UiRowData_RowColor_AdvancedDataGrid id="adgUiRowData" width="100%" height="100%"
										dataProvider="{dp4adgUiRowData}" editable="true" rowColorFunction="calcRowColor"/>
	<controls:AksDataGridControlBar id="comAksDataGridControlBar" paramIn4enabled4BtnSetColumns="false" paramIn4dataGrid="{adgUiRowData}" 
									paramIn4callback4thisObject="{this}" paramIn4callback4queryFunction="{prvFun4pageQueryReportDatas}" 
									paramIn4callback4showzeroFunction="{prvFun4ShowZero}" paramin4ShowZero="true">
	</controls:AksDataGridControlBar>
	
</mx:Module>
