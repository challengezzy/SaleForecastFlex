<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" width="650" height="240"
				   close="PopUpManager.removePopUp(this);" title="{resourceManager.getString('menu','setLayer')}"
				   creationComplete="creationCompleteHandler(event)" xmlns:buttons="com.cool.buttons.*" >
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" verticalAlign="middle" paddingLeft="10" paddingRight="10" paddingTop="0" paddingBottom="10"/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Metadata>
	</fx:Metadata>	
	<fx:Script>
		<![CDATA[
			import aks.aksas.collections.HashMap;
			
			import com.cool.assets.CoolAssetsFile;
			import com.cool.utils.AlertUtil;
			
			import dmdd.dmddas.common.constant.BizConst;
			import dmdd.dmddas.common.constant.SysConst;
			import dmdd.dmddas.common.system.ClientEnvironment;
			import dmdd.dmddas.common.utils.UtilOrganization;
			import dmdd.dmddas.common.utils.UtilOrganizationCharacter;
			import dmdd.dmddas.common.utils.UtilProOrg;
			import dmdd.dmddas.common.utils.UtilProduct;
			import dmdd.dmddas.common.utils.UtilProductCharacter;
			import dmdd.dmddas.common.utils.UtilStrKey;
			import dmdd.dmddas.dataaccess.aidobject.ABProOrg;
			import dmdd.dmddas.dataaccess.aidobject.ABUiRowData;
			import dmdd.dmddas.dataaccess.aidobject.ABUiRowDataProOrg;
			import dmdd.dmddas.dataaccess.bizobject.BOrganization;
			import dmdd.dmddas.dataaccess.bizobject.BOrganizationCharacter;
			import dmdd.dmddas.dataaccess.bizobject.BOrganizationCharacterLayer;
			import dmdd.dmddas.dataaccess.bizobject.BOrganizationLayer;
			import dmdd.dmddas.dataaccess.bizobject.BProduct;
			import dmdd.dmddas.dataaccess.bizobject.BProductCharacter;
			import dmdd.dmddas.dataaccess.bizobject.BProductCharacterLayer;
			import dmdd.dmddas.dataaccess.bizobject.BProductLayer;
			import dmdd.dmddas.dataaccess.bizobject.BUnit;
			import dmdd.dmddas.dataaccess.bizobject.BUnitGroup;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			//	描述		begin
			//	描述		end
			
			//	0	输入参数    begin
			/** 确定后动作 */
			[Bindable]
			public var onOkFunction:Function = function():void{
				
			}
			
			//	0	输入参数    end
			
			//	1	输出参数    begin
			private var paramIo4blDisplayProduct:Boolean = true;
			private var paramIo4productLayer:BProductLayer = null;			
			private var paramIo4blDisplayProductCharacter:Boolean = false;
			private var paramIo4productCharacterLayer:BProductCharacterLayer = null;
			private var paramIo4productCharacterType:String = null;
			
			private var paramIo4blDisplayOrganization:Boolean = true;
			private var paramIo4organizationLayer:BOrganizationLayer = null;			
			private var paramIo4blDisplayOrganizationCharacter:Boolean = false;
			private var paramIo4organizationCharacterLayer:BOrganizationCharacterLayer = null;
			private var paramIo4organizationCharacterType:String = null;
			
			private var paramOut4arrUiRowDataProOrgs:ArrayCollection = new ArrayCollection();
			
			private var paramOut4arrProOrgs:ArrayCollection = new ArrayCollection();			
			private var paramOut4arrBizDatas:ArrayCollection = new ArrayCollection();
			
			private var paramOut4unitGroup:BUnitGroup = null;
			private var paramOut4unit:BUnit = null;
			
			private var paramOut4blPageProOrg:Boolean = true;
			
			private var paramOut4periodBegin:int = SysConst.PERIOD_NULL;
			private var paramOut4periodEnd:int = SysConst.PERIOD_NULL;	
			
			//	1	输出参数    end
			
			//	2	本地变量    begin	
			//	2	本地变量    end			
			
			//	3	公共方法    begin	
			public function pubFun4getParamOut4arrUiRowDataProOrgs():ArrayCollection
			{
				return this.paramOut4arrUiRowDataProOrgs;
			}
			
			public function pubFun4checkDisplayOption():Boolean
			{
				// 检查显示设置    begin
				var blDisplayProduct:Boolean = true;
				var productLayer:BProductLayer = null;
				var blDisplayProductCharacter:Boolean = false;
				var productCharacterLayer:BProductCharacterLayer = null;	
				var productCharacterType:String = null;
				
				var blDisplayOrganization:Boolean = true;
				var organizationLayer:BOrganizationLayer = null;
				var blDisplayOrganizationCharacter:Boolean = false;
				var organizationCharacterLayer:BOrganizationCharacterLayer = null;	
				var organizationCharacterType:String = null;
				
				var alert_title_hint:String = resourceManager.getString('alert','alert_title_hint');
				var alert_msg:String = "";		
				
				blDisplayProduct = this.checkBoxProduct.selected;
				productLayer = BProductLayer(this.comboBoxProductLayer.selectedItem);
				if( blDisplayProduct == true )
				{
					if( productLayer == null )
					{
						alert_msg = resourceManager.getString('alert','alert_msg_noproductlayer16');
						Alert.show( alert_msg, alert_title_hint);
						return false;							
					}
				}
				
				blDisplayProductCharacter = this.checkBoxProductCharacter.selected;
				productCharacterLayer = BProductCharacterLayer(this.comboBoxProductCharacterLayer.selectedItem);
				productCharacterType = String(this.comboBoxProductCharacterType.selectedItem);
				if( blDisplayProductCharacter == true )
				{
					if( productCharacterLayer == null )
					{
						alert_msg = resourceManager.getString('alert','alert_msg_noproductcharacterlayer16');
						Alert.show( alert_msg, alert_title_hint);
						return false;							
					}
					
					if( productCharacterType == null || productCharacterType == "" )
					{
						alert_msg = resourceManager.getString('alert','alert_msg_noproductcharactertype16');
						Alert.show( alert_msg, alert_title_hint);
						return false;							
					}					
				}
				
				
				blDisplayOrganization = this.checkBoxOrganization.selected;
				organizationLayer = BOrganizationLayer(this.comboBoxOrganizationLayer.selectedItem);
				if( blDisplayOrganization == true )
				{
					if( organizationLayer == null )
					{
						alert_msg = resourceManager.getString('alert','alert_msg_noorganizationlayer16');
						Alert.show( alert_msg, alert_title_hint);
						return false;							
					}
				}
				
				blDisplayOrganizationCharacter = this.checkBoxOrganizationCharacter.selected;
				organizationCharacterLayer = BOrganizationCharacterLayer(this.comboBoxOrganizationCharacterLayer.selectedItem);
				organizationCharacterType = String(this.comboBoxOrganizationCharacterType.selectedItem);
				if( blDisplayOrganizationCharacter == true )
				{
					if( organizationCharacterLayer == null )
					{
						alert_msg = resourceManager.getString('alert','alert_msg_noorganizationcharacterlayer16');
						Alert.show( alert_msg, alert_title_hint);
						return false;							
					}
					
					if( organizationCharacterType == null || organizationCharacterType == "" )
					{
						alert_msg = resourceManager.getString('alert','alert_msg_noorganizationcharactertype16');
						Alert.show( alert_msg, alert_title_hint);
						return false;							
					}					
				}
				
				
				this.paramIo4blDisplayProduct = blDisplayProduct;
				this.paramIo4productLayer = productLayer;
				this.paramIo4blDisplayProductCharacter = blDisplayProductCharacter;
				this.paramIo4productCharacterLayer = productCharacterLayer;
				this.paramIo4productCharacterType = productCharacterType;
				
				this.paramIo4blDisplayOrganization = blDisplayOrganization;
				this.paramIo4organizationLayer = organizationLayer;
				this.paramIo4blDisplayOrganizationCharacter = blDisplayOrganizationCharacter;
				this.paramIo4organizationCharacterLayer = organizationCharacterLayer;
				this.paramIo4organizationCharacterType = organizationCharacterType;				
				
				return true;
			}
			
			public function pubFun4getParamIo4blDisplayProduct():Boolean
			{
				return this.paramIo4blDisplayProduct;
			}
			public function pubFun4getParamIo4productLayer():BProductLayer
			{
				return this.paramIo4productLayer;
			}			
			public function pubFun4getParamIo4blDisplayProductCharacter():Boolean
			{
				return this.paramIo4blDisplayProductCharacter;
			}
			public function pubFun4getParamIo4productCharacterLayer():BProductCharacterLayer
			{
				return this.paramIo4productCharacterLayer;
			}	
			public function pubFun4getParamIo4productCharacterType():String
			{
				return this.paramIo4productCharacterType;
			}		
			public function pubFun4getParamIo4blDisplayOrganization():Boolean
			{
				return this.paramIo4blDisplayOrganization;
			}
			public function pubFun4getParamIo4organizationLayer():BOrganizationLayer
			{
				return this.paramIo4organizationLayer;
			}			
			public function pubFun4getParamIo4blDisplayOrganizationCharacter():Boolean
			{
				return this.paramIo4blDisplayOrganizationCharacter;
			}
			public function pubFun4getParamIo4organizationCharacterLayer():BOrganizationCharacterLayer
			{
				return this.paramIo4organizationCharacterLayer;
			}	
			public function pubFun4getParamIo4organizationCharacterType():String
			{
				return this.paramIo4organizationCharacterType;
			}			
			
			public function pubFun4excuteProOrg(uiRowData:ABUiRowData):void
			{
				if(uiRowData==null)
				{
					return ;
				}
				
				if(this.pubFun4checkDisplayOption() == false)
				{
					return ;
				}
				
				var alert_title_hint:String = resourceManager.getString('alert','alert_title_hint');
				var alert_msg:String = "";
				
				
				var prvVar4dp4comAdgProOrg:ArrayCollection = new ArrayCollection();
				
				prvVar4dp4comAdgProOrg= UtilProOrg.getDetailProOrgsByIds(uiRowData.detailProOrgIds,true);
				
				var prvVar4dp4comAdgBizData:ArrayCollection = new ArrayCollection();
				prvVar4dp4comAdgBizData.addItem(uiRowData.bizData);

				
				this.paramOut4arrProOrgs = new ArrayCollection();
				this.paramOut4arrProOrgs.addAll( prvVar4dp4comAdgProOrg );
				
				this.paramOut4arrBizDatas = new ArrayCollection();
				this.paramOut4arrBizDatas.addAll( prvVar4dp4comAdgBizData );
				
				this.paramOut4unitGroup = null;
				this.paramOut4unit = null;
				
				//		输出参数ProOrgBizData部分	end
				
				
				//		求解范围覆盖的明细范围并投影到显示层次		begin 				
				var arrDetailProOrgs:ArrayCollection = UtilProOrg.getDetailProOrgs( prvVar4dp4comAdgProOrg, true );
				
				this.paramOut4arrUiRowDataProOrgs = new ArrayCollection();
				this.paramOut4unitGroup = null;
				this.paramOut4unit = null;
				
				var projectProduct:BProduct = null;
				var projectProductCharacter:BProductCharacter = null;			
				var projectOrganization:BOrganization = null;
				var projectOrganizationCharacter:BOrganizationCharacter = null;
				
				var strKey4Product:String = "";
				var strKey4Organization:String = "";
				
				var hmap_detailProduct_projectProduct:HashMap = new HashMap(); // 明细产品到投影产品的映射 
				var hmap_detailProduct_projectProductCharacter:HashMap = new HashMap(); // 明细产品到投影产品的映射				
				var hmap_detailOrganization_projectOrganization:HashMap = new HashMap(); // 明细组织到投影组织的映射 
				var hmap_detailOrganization_projectOrganizationCharacter:HashMap = new HashMap(); // 明细组织到投影组织的映射
				
				var i:int;
				var detailProOrg:ABProOrg = null;
				var detailProductCharacter:BProductCharacter = null;
				var detailOrganizationCharacter:BOrganizationCharacter;
				
				var hmap_uiRowDataProOrgs:HashMap = new HashMap();
				var strKey4uiRowDataProOrg:String = null;
				var uiRowDataProOrg:ABUiRowDataProOrg = null;
				var baseUnit:BUnit = null;
				var nonBaseUnit:BUnit = null;
				var num4NonBaseUnit:int = 0;
				
				var paramIo4UiRowDataProOrgHashMap:HashMap = new HashMap();
				var arr4ProOrg:ArrayCollection = null;
				
				if( arrDetailProOrgs != null && arrDetailProOrgs.length > 0 )
				{
					for( i=0; i<arrDetailProOrgs.length; i=i+1 )
					{
						detailProOrg = ABProOrg( arrDetailProOrgs.getItemAt(i) );
						
						//	单位组	begin
						if( detailProOrg.product.unitGroup == null )
						{
							alert_msg = resourceManager.getString('alert','alter_msg_unitgroupisnull14');
							Alert.show( alert_msg, alert_title_hint);
							return;							
						}
						if( this.paramOut4unitGroup == null )
						{
							this.paramOut4unitGroup = detailProOrg.product.unitGroup;
							baseUnit = this.paramOut4unitGroup.getBaseUnit();
						}
						else if( detailProOrg.product.unitGroup.id != this.paramOut4unitGroup.id )
						{
							alert_msg = resourceManager.getString('alert','alter_msg_multiunitgroup14');
							Alert.show( alert_msg, alert_title_hint);
							return;									
						}
						if( detailProOrg.product.unit.isBase == BizConst.GLOBAL_YESNO_NO )
						{
							if( nonBaseUnit == null )
							{
								nonBaseUnit = detailProOrg.product.unit;
								num4NonBaseUnit = 1;								
							}
							else
							{
								if( detailProOrg.product.unit.id != nonBaseUnit.id )
								{
									num4NonBaseUnit = 2;	//	just means multiple									
								}
							}
						}
						//	单位组	end
						
						//	计算投影		begin
						strKey4Product = "" + detailProOrg.product.id;
						strKey4Organization = "" + detailProOrg.organization.id;
						
						if( this.paramIo4blDisplayProduct == true )
						{
							projectProduct = BProduct( hmap_detailProduct_projectProduct.getValue(strKey4Product) );
							if( projectProduct == null )
							{
								projectProduct = UtilProduct.getProjectProductByLayer( detailProOrg.product, this.paramIo4productLayer.value );
								if( projectProduct == null )
								{
									// should not happen
									continue;
								}							
								hmap_detailProduct_projectProduct.put( strKey4Product, projectProduct ); 
							}
						}
						else
						{
							// 不需要显示product
							projectProduct = null;
						}
						
						if( this.paramIo4blDisplayProductCharacter == true )
						{
							projectProductCharacter = BProductCharacter( hmap_detailProduct_projectProductCharacter.getValue( strKey4Product ) );
							if( projectProductCharacter == null )
							{
								detailProductCharacter = UtilProductCharacter.getDetailProductCharacter( detailProOrg.product, this.paramIo4productCharacterType );
								if( detailProductCharacter != null )
								{
									projectProductCharacter = UtilProductCharacter.getProjectProductCharacterByLayer( detailProductCharacter, this.paramIo4productCharacterLayer.value);
									if( projectProductCharacter == null )
									{
										// should not happen
										continue;	
									}
									hmap_detailProduct_projectProductCharacter.put( strKey4Product, projectProductCharacter );
								}
								else
								{
									// 明细产品没有被指定该类型的特征，投影到一个特殊的产品特征上
									projectProductCharacter = null;
								}
							}
						}
						else
						{
							// 不需要显示productCharacter
							projectProductCharacter = null;
						}					
						
						if( this.paramIo4blDisplayOrganization == true )
						{
							projectOrganization = BOrganization( hmap_detailOrganization_projectOrganization.getValue(strKey4Organization) );
							if( projectOrganization == null )
							{
								projectOrganization = UtilOrganization.getProjectOrganizationByLayer( detailProOrg.organization, this.paramIo4organizationLayer.value );
								if( projectOrganization == null )
								{
									// should not happen
									continue;
								}							
								hmap_detailOrganization_projectOrganization.put( strKey4Organization, projectOrganization ); 
							}
						}
						else
						{
							// 不需要显示organization
							projectOrganization = null;
						}
						
						if( this.paramIo4blDisplayOrganizationCharacter == true )
						{
							projectOrganizationCharacter = BOrganizationCharacter( hmap_detailOrganization_projectOrganizationCharacter.getValue( strKey4Organization ) );
							if( projectOrganizationCharacter == null )
							{
								detailOrganizationCharacter = UtilOrganizationCharacter.getDetailOrganizationCharacter( detailProOrg.organization, this.paramIo4organizationCharacterType );
								if( detailOrganizationCharacter != null )
								{
									projectOrganizationCharacter = UtilOrganizationCharacter.getProjectOrganizationCharacterByLayer( detailOrganizationCharacter, this.paramIo4organizationCharacterLayer.value);
									if( projectOrganizationCharacter == null )
									{
										// should not happen
										continue;	
									}
									hmap_detailOrganization_projectOrganizationCharacter.put( strKey4Organization, projectOrganizationCharacter );
								}
								else
								{
									// 明细组织没有被指定该类型的特征，投影到一个特殊的组织特征上
									projectOrganizationCharacter = null;
								}
							}
						}
						else
						{
							// 不需要显示organizationCharacter
							projectOrganizationCharacter = null;
						}
						//	计算投影		end							
						
						strKey4uiRowDataProOrg = UtilStrKey.getStrKey4PPcOOcB( projectProduct, projectProductCharacter, projectOrganization, projectOrganizationCharacter, null );
						uiRowDataProOrg = ABUiRowDataProOrg( hmap_uiRowDataProOrgs.getValue( strKey4uiRowDataProOrg ) );
						if( uiRowDataProOrg == null )
						{
							uiRowDataProOrg = new ABUiRowDataProOrg();
							uiRowDataProOrg.product = projectProduct;
							uiRowDataProOrg.productCharacter = projectProductCharacter;
							uiRowDataProOrg.organization = projectOrganization;
							uiRowDataProOrg.organizationCharacter = projectOrganizationCharacter;
							uiRowDataProOrg.detailProOrgIds = new ArrayCollection();
						}
						
						uiRowDataProOrg.detailProOrgIds.addItem( UtilProOrg.getProOrgId( detailProOrg.product, detailProOrg.organization ) );
						
						hmap_uiRowDataProOrgs.put( strKey4uiRowDataProOrg , uiRowDataProOrg );	
						
						arr4ProOrg = ArrayCollection(paramIo4UiRowDataProOrgHashMap.getValue(strKey4uiRowDataProOrg));
						if(arr4ProOrg == null|| arr4ProOrg.length==0)
						{
							arr4ProOrg = new ArrayCollection();
							arr4ProOrg.addItem(detailProOrg);
						}
						else
						{
							arr4ProOrg.addItem(detailProOrg);
						}
						paramIo4UiRowDataProOrgHashMap.put(strKey4uiRowDataProOrg,arr4ProOrg);
					}
				}
				if( num4NonBaseUnit == 1 )
				{
					this.paramOut4unit = nonBaseUnit;
				}
				else
				{
					if(baseUnit==null)
					{
						alert_msg = resourceManager.getString('alert','alter_msg_nobaseunit14');
						Alert.show( alert_msg, alert_title_hint);						
						return ;
					}
					this.paramOut4unit = baseUnit;
				}
				this.paramOut4arrUiRowDataProOrgs = hmap_uiRowDataProOrgs.getValues();

			}
			
			public function pubFun4excuteProOrgs(arruiRowData:ArrayCollection):void
			{
				if(arruiRowData==null)
				{
					return ;
				}
				if(this.pubFun4checkDisplayOption() == false)
				{
					return ;
				}
				
				var alert_title_hint:String = resourceManager.getString('alert','alert_title_hint');
				var alert_msg:String = "";
								
				this.paramOut4arrProOrgs = new ArrayCollection();
				this.paramOut4arrProOrgs.addAll( arruiRowData );
				
				this.paramOut4unitGroup = null;
				this.paramOut4unit = null;
				
				//		输出参数ProOrgBizData部分	end
				
				
				//		求解范围覆盖的明细范围并投影到显示层次		begin 				
				var arrDetailProOrgs:ArrayCollection = UtilProOrg.getDetailProOrgs( arruiRowData, true );
				
				this.paramOut4arrUiRowDataProOrgs = new ArrayCollection();
				this.paramOut4unitGroup = null;
				this.paramOut4unit = null;
				
				var projectProduct:BProduct = null;
				var projectProductCharacter:BProductCharacter = null;			
				var projectOrganization:BOrganization = null;
				var projectOrganizationCharacter:BOrganizationCharacter = null;
				
				var strKey4Product:String = "";
				var strKey4Organization:String = "";
				
				var hmap_detailProduct_projectProduct:HashMap = new HashMap(); // 明细产品到投影产品的映射 
				var hmap_detailProduct_projectProductCharacter:HashMap = new HashMap(); // 明细产品到投影产品的映射				
				var hmap_detailOrganization_projectOrganization:HashMap = new HashMap(); // 明细组织到投影组织的映射 
				var hmap_detailOrganization_projectOrganizationCharacter:HashMap = new HashMap(); // 明细组织到投影组织的映射
				
				var i:int;
				var detailProOrg:ABProOrg = null;
				var detailProductCharacter:BProductCharacter = null;
				var detailOrganizationCharacter:BOrganizationCharacter;
				
				var hmap_uiRowDataProOrgs:HashMap = new HashMap();
				var strKey4uiRowDataProOrg:String = null;
				var uiRowDataProOrg:ABUiRowDataProOrg = null;
				var baseUnit:BUnit = null;
				var nonBaseUnit:BUnit = null;
				var num4NonBaseUnit:int = 0;
				
				var paramIo4UiRowDataProOrgHashMap:HashMap = new HashMap();
				var arr4ProOrg:ArrayCollection = null;
				
				if( arrDetailProOrgs != null && arrDetailProOrgs.length > 0 )
				{
					for( i=0; i<arrDetailProOrgs.length; i=i+1 )
					{
						detailProOrg = ABProOrg( arrDetailProOrgs.getItemAt(i) );
						
						//	单位组	begin
						if( detailProOrg.product.unitGroup == null )
						{
							alert_msg = resourceManager.getString('alert','alter_msg_unitgroupisnull14');
							Alert.show( alert_msg, alert_title_hint);
							return;							
						}
						if( this.paramOut4unitGroup == null )
						{
							this.paramOut4unitGroup = detailProOrg.product.unitGroup;
							baseUnit = this.paramOut4unitGroup.getBaseUnit();
						}
						else if( detailProOrg.product.unitGroup.id != this.paramOut4unitGroup.id )
						{
							alert_msg = resourceManager.getString('alert','alter_msg_multiunitgroup14');
							Alert.show( alert_msg, alert_title_hint);
							return;									
						}
						if( detailProOrg.product.unit.isBase == BizConst.GLOBAL_YESNO_NO )
						{
							if( nonBaseUnit == null )
							{
								nonBaseUnit = detailProOrg.product.unit;
								num4NonBaseUnit = 1;								
							}
							else
							{
								if( detailProOrg.product.unit.id != nonBaseUnit.id )
								{
									num4NonBaseUnit = 2;	//	just means multiple									
								}
							}
						}
						//	单位组	end
						
						//	计算投影		begin
						strKey4Product = "" + detailProOrg.product.id;
						strKey4Organization = "" + detailProOrg.organization.id;
						
						if( this.paramIo4blDisplayProduct == true )
						{
							projectProduct = BProduct( hmap_detailProduct_projectProduct.getValue(strKey4Product) );
							if( projectProduct == null )
							{
								projectProduct = UtilProduct.getProjectProductByLayer( detailProOrg.product, this.paramIo4productLayer.value );
								if( projectProduct == null )
								{
									// should not happen
									continue;
								}							
								hmap_detailProduct_projectProduct.put( strKey4Product, projectProduct ); 
							}
						}
						else
						{
							// 不需要显示product
							projectProduct = null;
						}
						
						if( this.paramIo4blDisplayProductCharacter == true )
						{
							projectProductCharacter = BProductCharacter( hmap_detailProduct_projectProductCharacter.getValue( strKey4Product ) );
							if( projectProductCharacter == null )
							{
								detailProductCharacter = UtilProductCharacter.getDetailProductCharacter( detailProOrg.product, this.paramIo4productCharacterType );
								if( detailProductCharacter != null )
								{
									projectProductCharacter = UtilProductCharacter.getProjectProductCharacterByLayer( detailProductCharacter, this.paramIo4productCharacterLayer.value);
									if( projectProductCharacter == null )
									{
										// should not happen
										continue;	
									}
									hmap_detailProduct_projectProductCharacter.put( strKey4Product, projectProductCharacter );
								}
								else
								{
									// 明细产品没有被指定该类型的特征，投影到一个特殊的产品特征上
									projectProductCharacter = null;
								}
							}
						}
						else
						{
							// 不需要显示productCharacter
							projectProductCharacter = null;
						}					
						
						if( this.paramIo4blDisplayOrganization == true )
						{
							projectOrganization = BOrganization( hmap_detailOrganization_projectOrganization.getValue(strKey4Organization) );
							if( projectOrganization == null )
							{
								projectOrganization = UtilOrganization.getProjectOrganizationByLayer( detailProOrg.organization, this.paramIo4organizationLayer.value );
								if( projectOrganization == null )
								{
									// should not happen
									continue;
								}							
								hmap_detailOrganization_projectOrganization.put( strKey4Organization, projectOrganization ); 
							}
						}
						else
						{
							// 不需要显示organization
							projectOrganization = null;
						}
						
						if( this.paramIo4blDisplayOrganizationCharacter == true )
						{
							projectOrganizationCharacter = BOrganizationCharacter( hmap_detailOrganization_projectOrganizationCharacter.getValue( strKey4Organization ) );
							if( projectOrganizationCharacter == null )
							{
								detailOrganizationCharacter = UtilOrganizationCharacter.getDetailOrganizationCharacter( detailProOrg.organization, this.paramIo4organizationCharacterType );
								if( detailOrganizationCharacter != null )
								{
									projectOrganizationCharacter = UtilOrganizationCharacter.getProjectOrganizationCharacterByLayer( detailOrganizationCharacter, this.paramIo4organizationCharacterLayer.value);
									if( projectOrganizationCharacter == null )
									{
										// should not happen
										continue;	
									}
									hmap_detailOrganization_projectOrganizationCharacter.put( strKey4Organization, projectOrganizationCharacter );
								}
								else
								{
									// 明细组织没有被指定该类型的特征，投影到一个特殊的组织特征上
									projectOrganizationCharacter = null;
								}
							}
						}
						else
						{
							// 不需要显示organizationCharacter
							projectOrganizationCharacter = null;
						}
						//	计算投影		end							
						
						strKey4uiRowDataProOrg = UtilStrKey.getStrKey4PPcOOcB( projectProduct, projectProductCharacter, projectOrganization, projectOrganizationCharacter, null );
						uiRowDataProOrg = ABUiRowDataProOrg( hmap_uiRowDataProOrgs.getValue( strKey4uiRowDataProOrg ) );
						if( uiRowDataProOrg == null )
						{
							uiRowDataProOrg = new ABUiRowDataProOrg();
							uiRowDataProOrg.product = projectProduct;
							uiRowDataProOrg.productCharacter = projectProductCharacter;
							uiRowDataProOrg.organization = projectOrganization;
							uiRowDataProOrg.organizationCharacter = projectOrganizationCharacter;
							uiRowDataProOrg.detailProOrgIds = new ArrayCollection();
						}
						
						uiRowDataProOrg.detailProOrgIds.addItem( UtilProOrg.getProOrgId( detailProOrg.product, detailProOrg.organization ) );
						
						hmap_uiRowDataProOrgs.put( strKey4uiRowDataProOrg , uiRowDataProOrg );	
						
						arr4ProOrg = ArrayCollection(paramIo4UiRowDataProOrgHashMap.getValue(strKey4uiRowDataProOrg));
						if(arr4ProOrg == null|| arr4ProOrg.length==0)
						{
							arr4ProOrg = new ArrayCollection();
							arr4ProOrg.addItem(detailProOrg);
						}
						else
						{
							arr4ProOrg.addItem(detailProOrg);
						}
						paramIo4UiRowDataProOrgHashMap.put(strKey4uiRowDataProOrg,arr4ProOrg);
					}
				}
				if( num4NonBaseUnit == 1 )
				{
					this.paramOut4unit = nonBaseUnit;
				}
				else
				{
					if(baseUnit==null)
					{
						alert_msg = resourceManager.getString('alert','alter_msg_nobaseunit14');
						Alert.show( alert_msg, alert_title_hint);						
						return ;
					}
					this.paramOut4unit = baseUnit;
				}
				this.paramOut4arrUiRowDataProOrgs = hmap_uiRowDataProOrgs.getValues();
				
			}
			
			//	3	公共方法    end		
			
			//	4	初始化方法    begin			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				comboBoxProductLayer.selectedIndex = ClientEnvironment.getProductLayers().length-1;
				comboBoxOrganizationLayer.selectedIndex = ClientEnvironment.getOrganizationLayers().length-1;
				
				comboBoxProductCharacterLayer.selectedIndex = ClientEnvironment.getProductCharacterLayers().length-1;
				comboBoxOrganizationCharacterLayer.selectedIndex = ClientEnvironment.getOrganizationCharacterLayers().length -1;
			}						
			//	4	初始化方法    end				
			
			//	5	事件响应方法    begin	
			private function onClick4checkBoxOrganization():void
			{
				// 此时的值已经是变化了的值
				if( this.checkBoxOrganization.selected == true )
				{
					this.checkBoxOrganizationCharacter.selected = false;	
				}
			}
			
			private function onClick4checkBoxOrganizationCharacter():void
			{
				// 此时的值已经是变化了的值				
				if( this.checkBoxOrganizationCharacter.selected == true )
				{
					this.checkBoxOrganization.selected = false;	
				}
			}		
			
			private function onClick4checkBoxProduct():void
			{
				// 此时的值已经是变化了的值
				if( this.checkBoxProduct.selected == true )
				{
					this.checkBoxProductCharacter.selected = false;	
				}				
			}	
			
			private function onClick4checkBoxProductCharacter():void
			{
				// 此时的值已经是变化了的值
				if( this.checkBoxProductCharacter.selected == true )
				{
					this.checkBoxProduct.selected = false;	
				}				
			}
			
			protected function onOk(event:MouseEvent):void
			{
				if(!checkBoxOrganization.selected && !checkBoxOrganizationCharacter && !checkBoxProduct && !checkBoxProductCharacter){
					AlertUtil.show("请选择一个分层计算属性！");
					return ;
				}
				
				if( pubFun4checkDisplayOption() == false){
					return;
				}
				
				
				onOkFunction();
				
				PopUpManager.removePopUp(this);
			}
			
			//	5	事件响应方法    end
			
			//	6	本地方法    begin
			
			//	6	本地方法   end				
			
		]]>
	</fx:Script>	
	<s:VGroup width="100%" height="100%" horizontalAlign="left" verticalAlign="middle">
		<s:HGroup verticalAlign="middle">
			<s:CheckBox width="80" label="{resourceManager.getString('note','proLayer')}" 
						 id="checkBoxProduct" click="onClick4checkBoxProduct()" enabled="true"/>
			<s:ComboBox width="145" id="comboBoxProductLayer" dataProvider="{ClientEnvironment.getProductLayers()}" enabled="{checkBoxProduct.selected}" selectedIndex="0"/>
			
			<s:Spacer width="10" />
			<s:CheckBox width="120" label="{resourceManager.getString('note','proCharType')}"  
						 id="checkBoxProductCharacter" click="onClick4checkBoxProductCharacter()" enabled="true"/>
			<s:ComboBox width="145" id="comboBoxProductCharacterType" dataProvider="{ClientEnvironment.getProductCharacterTypes()}"
						enabled="{checkBoxProductCharacter.selected}" selectedIndex="0" />
			
			<s:Label  width="100" text="{resourceManager.getString('note','proCharLayer')}"  visible="false"/>
			<s:ComboBox width="145" id="comboBoxProductCharacterLayer" dataProvider="{ClientEnvironment.getProductCharacterLayers()}" 
						enabled="{checkBoxProductCharacter.selected}"  visible="false" />
		</s:HGroup>
		<s:HGroup verticalAlign="middle">
			<s:CheckBox width="80" label="{resourceManager.getString('note','orgLayer')}" id="checkBoxOrganization" 
						click="onClick4checkBoxOrganization()" enabled="true"/>
			<s:ComboBox width="145" id="comboBoxOrganizationLayer" dataProvider="{ClientEnvironment.getOrganizationLayers()}"
						enabled="{checkBoxOrganization.selected}" selectedIndex="0" />
			
			<s:Spacer width="10" />
			<s:CheckBox width="120" label="{resourceManager.getString('note','orgCharType')}" 
						id="checkBoxOrganizationCharacter" click="onClick4checkBoxOrganizationCharacter()" enabled="true"/>
			
			<s:ComboBox width="145" id="comboBoxOrganizationCharacterType" dataProvider="{ClientEnvironment.getOrganizationCharacterTypes()}" 
						enabled="{checkBoxOrganizationCharacter.selected}"	selectedIndex="0" />
			
			<s:Label width="100" text="{resourceManager.getString('note','orgCharLayer')}" visible="false"/>			
			<s:ComboBox width="140" id="comboBoxOrganizationCharacterLayer" dataProvider="{ClientEnvironment.getOrganizationCharacterLayers()}" 
						enabled="{checkBoxOrganizationCharacter.selected}"	visible="false"/>
			
		</s:HGroup>
	</s:VGroup>
	
	<s:Spacer height="5" />
	<s:HGroup horizontalAlign="center" width="100%">
		<buttons:ButtonOk click="onOk(event)" />
		<buttons:ButtonCancel click="PopUpManager.removePopUp(this)" />
	</s:HGroup>
</s:TitleWindow>
